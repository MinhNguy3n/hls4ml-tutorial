-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conifer_jettag_accelerator_copy_output is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_gmem0_0_AWVALID : OUT STD_LOGIC;
    m_axi_gmem0_0_AWREADY : IN STD_LOGIC;
    m_axi_gmem0_0_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem0_0_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_0_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem0_0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_0_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_0_WVALID : OUT STD_LOGIC;
    m_axi_gmem0_0_WREADY : IN STD_LOGIC;
    m_axi_gmem0_0_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem0_0_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_0_WLAST : OUT STD_LOGIC;
    m_axi_gmem0_0_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_0_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_0_ARVALID : OUT STD_LOGIC;
    m_axi_gmem0_0_ARREADY : IN STD_LOGIC;
    m_axi_gmem0_0_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem0_0_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_0_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem0_0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_0_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_0_RVALID : IN STD_LOGIC;
    m_axi_gmem0_0_RREADY : OUT STD_LOGIC;
    m_axi_gmem0_0_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem0_0_RLAST : IN STD_LOGIC;
    m_axi_gmem0_0_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_0_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_gmem0_0_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_0_BVALID : IN STD_LOGIC;
    m_axi_gmem0_0_BREADY : OUT STD_LOGIC;
    m_axi_gmem0_0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_0_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_0_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    ap_ce : IN STD_LOGIC;
    n : IN STD_LOGIC_VECTOR (30 downto 0);
    p_read : IN STD_LOGIC_VECTOR (17 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (17 downto 0);
    p_read2 : IN STD_LOGIC_VECTOR (17 downto 0);
    p_read3 : IN STD_LOGIC_VECTOR (17 downto 0);
    p_read4 : IN STD_LOGIC_VECTOR (17 downto 0);
    score_out : IN STD_LOGIC_VECTOR (31 downto 0);
    gmem0_blk_n_AW : OUT STD_LOGIC;
    gmem0_blk_n_W : OUT STD_LOGIC;
    gmem0_blk_n_B : OUT STD_LOGIC );
end;


architecture behav of conifer_jettag_accelerator_copy_output is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv18_0 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv5_7 : STD_LOGIC_VECTOR (4 downto 0) := "00111";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv5_8 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv8_7E : STD_LOGIC_VECTOR (7 downto 0) := "01111110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_block_pp0_stage4_grp1 : BOOLEAN;
    signal ap_block_pp0_stage0_grp2 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_pp0_stage1_grp3 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_pp0_stage2_grp4 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_pp0_stage3_grp5 : BOOLEAN;
    signal icmp_ln21_fu_186_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln21_reg_886 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_11001_grp0 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone_grp0_done_reg : BOOLEAN := false;
    signal ap_block_pp0_stage0_subdone_grp0 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal tmp_fu_192_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_891 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln21_fu_206_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal select_ln21_reg_896 : STD_LOGIC_VECTOR (17 downto 0);
    signal trunc_ln21_fu_221_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln21_reg_902 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage1_11001_grp0 : BOOLEAN;
    signal ap_block_pp0_stage1_subdone_grp0_done_reg : BOOLEAN := false;
    signal ap_block_pp0_stage1_subdone_grp0 : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal add_ln21_fu_225_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln21_reg_907 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln21_1_fu_231_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln21_1_reg_912 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_237_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_reg_917 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln21_2_fu_251_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal select_ln21_2_reg_922 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_block_pp0_stage2_11001_grp0 : BOOLEAN;
    signal ap_block_pp0_stage2_subdone_grp0_done_reg : BOOLEAN := false;
    signal ap_block_pp0_stage2_subdone_grp0 : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal add_ln21_11_fu_295_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln21_11_reg_938 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln21_3_fu_308_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln21_3_reg_943 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln21_3_fu_312_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln21_3_reg_948 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln21_2_fu_318_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln21_2_reg_953 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_324_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_reg_958 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln21_4_fu_338_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal select_ln21_4_reg_963 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_265_p2 : STD_LOGIC_VECTOR (42 downto 0);
    signal shl_ln21_reg_969 : STD_LOGIC_VECTOR (42 downto 0);
    signal ap_block_pp0_stage3_11001_grp0 : BOOLEAN;
    signal ap_block_pp0_stage3_subdone_grp0_done_reg : BOOLEAN := false;
    signal ap_block_pp0_stage3_subdone_grp0 : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal lshr_ln_reg_974 : STD_LOGIC_VECTOR (41 downto 0);
    signal sub_ln21_1_fu_356_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln21_1_reg_979 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln21_4_fu_385_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln21_4_reg_994 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln21_5_fu_389_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln21_5_reg_999 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln21_3_fu_395_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln21_3_reg_1004 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_fu_401_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_reg_1009 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln21_6_fu_415_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal select_ln21_6_reg_1014 : STD_LOGIC_VECTOR (17 downto 0);
    signal trunc_ln21_5_reg_1020 : STD_LOGIC_VECTOR (29 downto 0);
    signal empty_fu_483_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_reg_1025 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage4_11001_grp0 : BOOLEAN;
    signal ap_block_pp0_stage4_subdone_grp0_done_reg : BOOLEAN := false;
    signal ap_block_pp0_stage4_subdone_grp0 : BOOLEAN;
    signal grp_fu_372_p2 : STD_LOGIC_VECTOR (42 downto 0);
    signal shl_ln21_1_reg_1030 : STD_LOGIC_VECTOR (42 downto 0);
    signal lshr_ln21_1_reg_1035 : STD_LOGIC_VECTOR (41 downto 0);
    signal sub_ln21_3_fu_500_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln21_3_reg_1040 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln21_6_fu_524_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln21_6_reg_1055 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln21_7_fu_528_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln21_7_reg_1060 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln21_4_fu_534_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln21_4_reg_1065 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_fu_540_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_reg_1070 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln21_8_fu_554_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal select_ln21_8_reg_1075 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_block_pp0_stage4_11001_grp1 : BOOLEAN;
    signal empty_30_fu_622_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_30_reg_1091 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_511_p2 : STD_LOGIC_VECTOR (42 downto 0);
    signal shl_ln21_2_reg_1096 : STD_LOGIC_VECTOR (42 downto 0);
    signal lshr_ln21_2_reg_1101 : STD_LOGIC_VECTOR (41 downto 0);
    signal sub_ln21_5_fu_639_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln21_5_reg_1106 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln21_7_fu_663_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln21_7_reg_1121 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln21_9_fu_667_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln21_9_reg_1126 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_31_fu_723_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_31_reg_1131 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_650_p2 : STD_LOGIC_VECTOR (42 downto 0);
    signal shl_ln21_3_reg_1136 : STD_LOGIC_VECTOR (42 downto 0);
    signal lshr_ln21_3_reg_1141 : STD_LOGIC_VECTOR (41 downto 0);
    signal sub_ln21_7_fu_740_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln21_7_reg_1146 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_32_fu_807_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_32_reg_1161 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_751_p2 : STD_LOGIC_VECTOR (42 downto 0);
    signal shl_ln21_4_reg_1166 : STD_LOGIC_VECTOR (42 downto 0);
    signal lshr_ln21_4_reg_1171 : STD_LOGIC_VECTOR (41 downto 0);
    signal sub_ln21_9_fu_824_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln21_9_reg_1176 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_33_fu_879_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_33_reg_1181 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_port_reg_n : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ap_port_reg_p_read1 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_port_reg_p_read2 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_port_reg_p_read3 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_port_reg_p_read4 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_port_reg_score_out : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln21_fu_562_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_11001_grp2 : BOOLEAN;
    signal ap_block_pp0_stage0_01001_grp2 : BOOLEAN;
    signal ap_block_pp0_stage1_11001_grp3 : BOOLEAN;
    signal ap_block_pp0_stage1_01001_grp3 : BOOLEAN;
    signal ap_block_pp0_stage2_11001_grp4 : BOOLEAN;
    signal ap_block_pp0_stage2_01001_grp4 : BOOLEAN;
    signal ap_block_pp0_stage3_11001_grp5 : BOOLEAN;
    signal ap_block_pp0_stage3_01001_grp5 : BOOLEAN;
    signal ap_block_pp0_stage4_01001_grp1 : BOOLEAN;
    signal ap_block_pp0_stage0_grp0 : BOOLEAN;
    signal sub_ln21_fu_200_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_block_pp0_stage1_grp0 : BOOLEAN;
    signal tmp_1_fu_214_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal sub_ln21_2_fu_245_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_block_pp0_stage2_grp0 : BOOLEAN;
    signal grp_fu_265_p0 : STD_LOGIC_VECTOR (42 downto 0);
    signal grp_fu_265_p1 : STD_LOGIC_VECTOR (42 downto 0);
    signal trunc_ln21_1_fu_271_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal trunc_ln21_2_fu_283_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal p_shl_fu_275_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_shl1_fu_287_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_301_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal sub_ln21_4_fu_332_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_block_pp0_stage3_grp0 : BOOLEAN;
    signal grp_fu_372_p0 : STD_LOGIC_VECTOR (42 downto 0);
    signal grp_fu_372_p1 : STD_LOGIC_VECTOR (42 downto 0);
    signal tmp_5_fu_378_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal sub_ln21_6_fu_409_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln21_2_fu_361_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage4_grp0 : BOOLEAN;
    signal tmp_4_fu_436_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln21_1_fu_451_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln21_1_fu_443_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln21_1_fu_454_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln21_2_fu_433_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_fu_460_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal pi_assign_fu_467_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal LD_fu_479_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_511_p0 : STD_LOGIC_VECTOR (42 downto 0);
    signal grp_fu_511_p1 : STD_LOGIC_VECTOR (42 downto 0);
    signal tmp_10_fu_517_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal sub_ln21_8_fu_548_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_7_fu_575_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln21_2_fu_590_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln21_3_fu_582_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln21_4_fu_593_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln21_5_fu_572_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_fu_599_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal pi_assign_1_fu_606_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal LD_1_fu_618_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_650_p0 : STD_LOGIC_VECTOR (42 downto 0);
    signal grp_fu_650_p1 : STD_LOGIC_VECTOR (42 downto 0);
    signal tmp_14_fu_656_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_11_fu_676_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln21_3_fu_691_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln21_5_fu_683_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln21_6_fu_694_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln21_8_fu_673_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_700_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal pi_assign_2_fu_707_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal LD_2_fu_719_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_751_p0 : STD_LOGIC_VECTOR (42 downto 0);
    signal grp_fu_751_p1 : STD_LOGIC_VECTOR (42 downto 0);
    signal tmp_15_fu_760_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln21_4_fu_775_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln21_7_fu_767_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln21_8_fu_778_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln21_11_fu_757_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_12_fu_784_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal pi_assign_3_fu_791_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal LD_3_fu_803_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_19_fu_832_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln21_5_fu_847_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln21_9_fu_839_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln21_10_fu_850_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln21_14_fu_829_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_16_fu_856_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal pi_assign_4_fu_863_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal LD_4_fu_875_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_265_ce : STD_LOGIC;
    signal grp_fu_372_ce : STD_LOGIC;
    signal grp_fu_511_ce : STD_LOGIC;
    signal grp_fu_650_ce : STD_LOGIC;
    signal grp_fu_751_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_idle_pp0_1to2 : STD_LOGIC;
    signal ap_idle_pp0_0to1 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal tmp_1_fu_214_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_1_fu_214_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_301_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_8_fu_301_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_378_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_5_fu_378_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_fu_517_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_10_fu_517_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_fu_656_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_14_fu_656_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component conifer_jettag_accelerator_ctlz_18_18_1_1 IS
    generic (
        din_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din : IN STD_LOGIC_VECTOR (17 downto 0);
        dout : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component conifer_jettag_accelerator_shl_43ns_5ns_43_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        OP : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (42 downto 0);
        din1 : IN STD_LOGIC_VECTOR (42 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (42 downto 0) );
    end component;



begin
    ctlz_18_18_1_1_U1711 : component conifer_jettag_accelerator_ctlz_18_18_1_1
    generic map (
        din_WIDTH => 18,
        dout_WIDTH => 18)
    port map (
        din => select_ln21_reg_896,
        dout => tmp_1_fu_214_p3);

    shl_43ns_5ns_43_2_1_U1712 : component conifer_jettag_accelerator_shl_43ns_5ns_43_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        OP => 0,
        din0_WIDTH => 43,
        din1_WIDTH => 5,
        dout_WIDTH => 43)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_265_p0,
        din1 => grp_fu_265_p1,
        ce => grp_fu_265_ce,
        dout => grp_fu_265_p2);

    ctlz_18_18_1_1_U1713 : component conifer_jettag_accelerator_ctlz_18_18_1_1
    generic map (
        din_WIDTH => 18,
        dout_WIDTH => 18)
    port map (
        din => select_ln21_2_reg_922,
        dout => tmp_8_fu_301_p3);

    shl_43ns_5ns_43_2_1_U1714 : component conifer_jettag_accelerator_shl_43ns_5ns_43_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        OP => 0,
        din0_WIDTH => 43,
        din1_WIDTH => 5,
        dout_WIDTH => 43)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_372_p0,
        din1 => grp_fu_372_p1,
        ce => grp_fu_372_ce,
        dout => grp_fu_372_p2);

    ctlz_18_18_1_1_U1715 : component conifer_jettag_accelerator_ctlz_18_18_1_1
    generic map (
        din_WIDTH => 18,
        dout_WIDTH => 18)
    port map (
        din => select_ln21_4_reg_963,
        dout => tmp_5_fu_378_p3);

    shl_43ns_5ns_43_2_1_U1716 : component conifer_jettag_accelerator_shl_43ns_5ns_43_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        OP => 0,
        din0_WIDTH => 43,
        din1_WIDTH => 5,
        dout_WIDTH => 43)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_511_p0,
        din1 => grp_fu_511_p1,
        ce => grp_fu_511_ce,
        dout => grp_fu_511_p2);

    ctlz_18_18_1_1_U1717 : component conifer_jettag_accelerator_ctlz_18_18_1_1
    generic map (
        din_WIDTH => 18,
        dout_WIDTH => 18)
    port map (
        din => select_ln21_6_reg_1014,
        dout => tmp_10_fu_517_p3);

    shl_43ns_5ns_43_2_1_U1718 : component conifer_jettag_accelerator_shl_43ns_5ns_43_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        OP => 0,
        din0_WIDTH => 43,
        din1_WIDTH => 5,
        dout_WIDTH => 43)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_650_p0,
        din1 => grp_fu_650_p1,
        ce => grp_fu_650_ce,
        dout => grp_fu_650_p2);

    ctlz_18_18_1_1_U1719 : component conifer_jettag_accelerator_ctlz_18_18_1_1
    generic map (
        din_WIDTH => 18,
        dout_WIDTH => 18)
    port map (
        din => select_ln21_8_reg_1075,
        dout => tmp_14_fu_656_p3);

    shl_43ns_5ns_43_2_1_U1720 : component conifer_jettag_accelerator_shl_43ns_5ns_43_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        OP => 0,
        din0_WIDTH => 43,
        din1_WIDTH => 5,
        dout_WIDTH => 43)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_751_p0,
        din1 => grp_fu_751_p1,
        ce => grp_fu_751_ce,
        dout => grp_fu_751_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_block_pp0_stage0_subdone_grp0_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_block_pp0_stage0_subdone_grp0_done_reg <= ap_const_boolean_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then
                    if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                        ap_block_pp0_stage0_subdone_grp0_done_reg <= ap_const_boolean_0;
                    elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp0)) then 
                        ap_block_pp0_stage0_subdone_grp0_done_reg <= ap_const_boolean_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_block_pp0_stage1_subdone_grp0_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_block_pp0_stage1_subdone_grp0_done_reg <= ap_const_boolean_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) then
                    if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then 
                        ap_block_pp0_stage1_subdone_grp0_done_reg <= ap_const_boolean_0;
                    elsif ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone_grp0)) then 
                        ap_block_pp0_stage1_subdone_grp0_done_reg <= ap_const_boolean_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_block_pp0_stage2_subdone_grp0_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_block_pp0_stage2_subdone_grp0_done_reg <= ap_const_boolean_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) then
                    if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then 
                        ap_block_pp0_stage2_subdone_grp0_done_reg <= ap_const_boolean_0;
                    elsif ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone_grp0)) then 
                        ap_block_pp0_stage2_subdone_grp0_done_reg <= ap_const_boolean_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_block_pp0_stage3_subdone_grp0_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_block_pp0_stage3_subdone_grp0_done_reg <= ap_const_boolean_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) then
                    if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then 
                        ap_block_pp0_stage3_subdone_grp0_done_reg <= ap_const_boolean_0;
                    elsif ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone_grp0)) then 
                        ap_block_pp0_stage3_subdone_grp0_done_reg <= ap_const_boolean_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_block_pp0_stage4_subdone_grp0_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_block_pp0_stage4_subdone_grp0_done_reg <= ap_const_boolean_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) then
                    if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then 
                        ap_block_pp0_stage4_subdone_grp0_done_reg <= ap_const_boolean_0;
                    elsif ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone_grp0)) then 
                        ap_block_pp0_stage4_subdone_grp0_done_reg <= ap_const_boolean_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_subdone))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001_grp0))) then
                    add_ln21_11_reg_938(31 downto 2) <= add_ln21_11_fu_295_p2(31 downto 2);
                add_ln21_3_reg_948 <= add_ln21_3_fu_312_p2;
                empty_32_reg_1161 <= empty_32_fu_807_p3;
                icmp_ln21_2_reg_953 <= icmp_ln21_2_fu_318_p2;
                lshr_ln21_4_reg_1171 <= grp_fu_751_p2(42 downto 1);
                select_ln21_4_reg_963 <= select_ln21_4_fu_338_p3;
                shl_ln21_4_reg_1166 <= grp_fu_751_p2;
                sub_ln21_9_reg_1176 <= sub_ln21_9_fu_824_p2;
                tmp_9_reg_958 <= ap_port_reg_p_read2(17 downto 17);
                trunc_ln21_3_reg_943 <= trunc_ln21_3_fu_308_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001_grp0))) then
                add_ln21_5_reg_999 <= add_ln21_5_fu_389_p2;
                empty_33_reg_1181 <= empty_33_fu_879_p3;
                icmp_ln21_3_reg_1004 <= icmp_ln21_3_fu_395_p2;
                lshr_ln_reg_974 <= grp_fu_265_p2(42 downto 1);
                select_ln21_6_reg_1014 <= select_ln21_6_fu_415_p3;
                shl_ln21_reg_969 <= grp_fu_265_p2;
                sub_ln21_1_reg_979 <= sub_ln21_1_fu_356_p2;
                tmp_13_reg_1009 <= ap_port_reg_p_read3(17 downto 17);
                trunc_ln21_4_reg_994 <= trunc_ln21_4_fu_385_p1;
                trunc_ln21_5_reg_1020 <= add_ln21_2_fu_361_p2(31 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage4_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001_grp0))) then
                add_ln21_7_reg_1060 <= add_ln21_7_fu_528_p2;
                empty_reg_1025 <= empty_fu_483_p3;
                icmp_ln21_4_reg_1065 <= icmp_ln21_4_fu_534_p2;
                lshr_ln21_1_reg_1035 <= grp_fu_372_p2(42 downto 1);
                select_ln21_8_reg_1075 <= select_ln21_8_fu_554_p3;
                shl_ln21_1_reg_1030 <= grp_fu_372_p2;
                sub_ln21_3_reg_1040 <= sub_ln21_3_fu_500_p2;
                tmp_17_reg_1070 <= ap_port_reg_p_read4(17 downto 17);
                trunc_ln21_6_reg_1055 <= trunc_ln21_6_fu_524_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp0))) then
                add_ln21_9_reg_1126 <= add_ln21_9_fu_667_p2;
                empty_30_reg_1091 <= empty_30_fu_622_p3;
                icmp_ln21_reg_886 <= icmp_ln21_fu_186_p2;
                lshr_ln21_2_reg_1101 <= grp_fu_511_p2(42 downto 1);
                select_ln21_reg_896 <= select_ln21_fu_206_p3;
                shl_ln21_2_reg_1096 <= grp_fu_511_p2;
                sub_ln21_5_reg_1106 <= sub_ln21_5_fu_639_p2;
                tmp_reg_891 <= p_read(17 downto 17);
                trunc_ln21_7_reg_1121 <= trunc_ln21_7_fu_663_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001_grp0))) then
                add_ln21_reg_907 <= add_ln21_fu_225_p2;
                empty_31_reg_1131 <= empty_31_fu_723_p3;
                icmp_ln21_1_reg_912 <= icmp_ln21_1_fu_231_p2;
                lshr_ln21_3_reg_1141 <= grp_fu_650_p2(42 downto 1);
                select_ln21_2_reg_922 <= select_ln21_2_fu_251_p3;
                shl_ln21_3_reg_1136 <= grp_fu_650_p2;
                sub_ln21_7_reg_1146 <= sub_ln21_7_fu_740_p2;
                tmp_6_reg_917 <= ap_port_reg_p_read1(17 downto 17);
                trunc_ln21_reg_902 <= trunc_ln21_fu_221_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_port_reg_n <= n;
                ap_port_reg_p_read1 <= p_read1;
                ap_port_reg_p_read2 <= p_read2;
                ap_port_reg_p_read3 <= p_read3;
                ap_port_reg_p_read4 <= p_read4;
                ap_port_reg_score_out <= score_out;
            end if;
        end if;
    end process;
    add_ln21_11_reg_938(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_block_pp0_stage4_subdone, ap_block_pp0_stage0_subdone, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone, ap_idle_pp0_1to2, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_idle_pp0_1to2 = ap_const_logic_1) and (ap_start = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((((ap_reset_idle_pp0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) or ((ap_reset_idle_pp0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage4_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    LD_1_fu_618_p1 <= pi_assign_1_fu_606_p5(32 - 1 downto 0);
    LD_2_fu_719_p1 <= pi_assign_2_fu_707_p5(32 - 1 downto 0);
    LD_3_fu_803_p1 <= pi_assign_3_fu_791_p5(32 - 1 downto 0);
    LD_4_fu_875_p1 <= pi_assign_4_fu_863_p5(32 - 1 downto 0);
    LD_fu_479_p1 <= pi_assign_fu_467_p5(32 - 1 downto 0);
    add_ln21_10_fu_850_p2 <= std_logic_vector(signed(sext_ln21_5_fu_847_p1) + signed(select_ln21_9_fu_839_p3));
    add_ln21_11_fu_295_p2 <= std_logic_vector(unsigned(p_shl_fu_275_p3) + unsigned(p_shl1_fu_287_p3));
    add_ln21_1_fu_454_p2 <= std_logic_vector(signed(sext_ln21_1_fu_451_p1) + signed(select_ln21_1_fu_443_p3));
    add_ln21_2_fu_361_p2 <= std_logic_vector(unsigned(add_ln21_11_reg_938) + unsigned(ap_port_reg_score_out));
    add_ln21_3_fu_312_p2 <= std_logic_vector(unsigned(trunc_ln21_3_fu_308_p1) + unsigned(ap_const_lv5_7));
    add_ln21_4_fu_593_p2 <= std_logic_vector(signed(sext_ln21_2_fu_590_p1) + signed(select_ln21_3_fu_582_p3));
    add_ln21_5_fu_389_p2 <= std_logic_vector(unsigned(trunc_ln21_4_fu_385_p1) + unsigned(ap_const_lv5_7));
    add_ln21_6_fu_694_p2 <= std_logic_vector(signed(sext_ln21_3_fu_691_p1) + signed(select_ln21_5_fu_683_p3));
    add_ln21_7_fu_528_p2 <= std_logic_vector(unsigned(trunc_ln21_6_fu_524_p1) + unsigned(ap_const_lv5_7));
    add_ln21_8_fu_778_p2 <= std_logic_vector(signed(sext_ln21_4_fu_775_p1) + signed(select_ln21_7_fu_767_p3));
    add_ln21_9_fu_667_p2 <= std_logic_vector(unsigned(trunc_ln21_7_fu_663_p1) + unsigned(ap_const_lv5_7));
    add_ln21_fu_225_p2 <= std_logic_vector(unsigned(trunc_ln21_fu_221_p1) + unsigned(ap_const_lv5_7));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(4);
        ap_block_pp0_stage0_01001_grp2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, m_axi_gmem0_0_WREADY)
    begin
                ap_block_pp0_stage0_11001 <= ((m_axi_gmem0_0_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage0_11001_grp0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_grp2_assign_proc : process(ap_enable_reg_pp0_iter1, m_axi_gmem0_0_WREADY)
    begin
                ap_block_pp0_stage0_11001_grp2 <= ((m_axi_gmem0_0_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage0_grp0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_grp2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, m_axi_gmem0_0_WREADY, ap_ce)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_const_logic_0 = ap_ce) or ((m_axi_gmem0_0_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_grp0_assign_proc : process(ap_ce)
    begin
                ap_block_pp0_stage0_subdone_grp0 <= (ap_const_logic_0 = ap_ce);
    end process;

        ap_block_pp0_stage1_01001_grp3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001_grp0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_11001_grp3_assign_proc : process(ap_enable_reg_pp0_iter1, m_axi_gmem0_0_WREADY)
    begin
                ap_block_pp0_stage1_11001_grp3 <= ((m_axi_gmem0_0_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage1_grp0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_grp3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, m_axi_gmem0_0_WREADY, ap_ce)
    begin
                ap_block_pp0_stage1_subdone <= ((ap_const_logic_0 = ap_ce) or ((m_axi_gmem0_0_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage1_subdone_grp0_assign_proc : process(ap_ce)
    begin
                ap_block_pp0_stage1_subdone_grp0 <= (ap_const_logic_0 = ap_ce);
    end process;

        ap_block_pp0_stage2_01001_grp4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001_grp0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage2_11001_grp4_assign_proc : process(ap_enable_reg_pp0_iter1, m_axi_gmem0_0_WREADY)
    begin
                ap_block_pp0_stage2_11001_grp4 <= ((m_axi_gmem0_0_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage2_grp0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_grp4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage2_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, m_axi_gmem0_0_WREADY, ap_ce)
    begin
                ap_block_pp0_stage2_subdone <= ((ap_const_logic_0 = ap_ce) or ((m_axi_gmem0_0_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage2_subdone_grp0_assign_proc : process(ap_ce)
    begin
                ap_block_pp0_stage2_subdone_grp0 <= (ap_const_logic_0 = ap_ce);
    end process;

        ap_block_pp0_stage3_01001_grp5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001_grp0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage3_11001_grp5_assign_proc : process(ap_enable_reg_pp0_iter1, m_axi_gmem0_0_WREADY)
    begin
                ap_block_pp0_stage3_11001_grp5 <= ((m_axi_gmem0_0_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage3_grp0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_grp5 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage3_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, m_axi_gmem0_0_WREADY, ap_ce)
    begin
                ap_block_pp0_stage3_subdone <= ((ap_const_logic_0 = ap_ce) or ((m_axi_gmem0_0_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage3_subdone_grp0_assign_proc : process(ap_ce)
    begin
                ap_block_pp0_stage3_subdone_grp0 <= (ap_const_logic_0 = ap_ce);
    end process;


    ap_block_pp0_stage4_01001_grp1_assign_proc : process(ap_enable_reg_pp0_iter2, m_axi_gmem0_0_BVALID)
    begin
                ap_block_pp0_stage4_01001_grp1 <= ((m_axi_gmem0_0_BVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage4_11001_grp0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage4_11001_grp1_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, m_axi_gmem0_0_AWREADY, m_axi_gmem0_0_WREADY, m_axi_gmem0_0_BVALID, ap_enable_reg_pp0_iter0_reg)
    begin
                ap_block_pp0_stage4_11001_grp1 <= (((m_axi_gmem0_0_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (m_axi_gmem0_0_AWREADY = ap_const_logic_0)) or ((m_axi_gmem0_0_BVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)));
    end process;

        ap_block_pp0_stage4_grp0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_grp1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage4_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, m_axi_gmem0_0_AWREADY, m_axi_gmem0_0_WREADY, m_axi_gmem0_0_BVALID, ap_enable_reg_pp0_iter0_reg, ap_ce)
    begin
                ap_block_pp0_stage4_subdone <= ((ap_const_logic_0 = ap_ce) or ((m_axi_gmem0_0_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (m_axi_gmem0_0_AWREADY = ap_const_logic_0)) or ((m_axi_gmem0_0_BVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage4_subdone_grp0_assign_proc : process(ap_ce)
    begin
                ap_block_pp0_stage4_subdone_grp0 <= (ap_const_logic_0 = ap_ce);
    end process;


    ap_done_assign_proc : process(ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_subdone)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_subdone))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to2_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to2 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_pp0_stage4, ap_enable_reg_pp0_iter0_reg, ap_block_pp0_stage4_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_subdone))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to1)
    begin
        if (((ap_idle_pp0_0to1 = ap_const_logic_1) and (ap_start = ap_const_logic_0))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    empty_30_fu_622_p3 <= 
        ap_const_lv32_0 when (icmp_ln21_1_reg_912(0) = '1') else 
        LD_1_fu_618_p1;
    empty_31_fu_723_p3 <= 
        ap_const_lv32_0 when (icmp_ln21_2_reg_953(0) = '1') else 
        LD_2_fu_719_p1;
    empty_32_fu_807_p3 <= 
        ap_const_lv32_0 when (icmp_ln21_3_reg_1004(0) = '1') else 
        LD_3_fu_803_p1;
    empty_33_fu_879_p3 <= 
        ap_const_lv32_0 when (icmp_ln21_4_reg_1065(0) = '1') else 
        LD_4_fu_875_p1;
    empty_fu_483_p3 <= 
        ap_const_lv32_0 when (icmp_ln21_reg_886(0) = '1') else 
        LD_fu_479_p1;

    gmem0_blk_n_AW_assign_proc : process(ap_CS_fsm_pp0_stage4, m_axi_gmem0_0_AWREADY, ap_enable_reg_pp0_iter0_reg, ap_block_pp0_stage4_grp1)
    begin
        if (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_grp1))) then 
            gmem0_blk_n_AW <= m_axi_gmem0_0_AWREADY;
        else 
            gmem0_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmem0_blk_n_B_assign_proc : process(ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage4, m_axi_gmem0_0_BVALID, ap_block_pp0_stage4_grp1)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_grp1))) then 
            gmem0_blk_n_B <= m_axi_gmem0_0_BVALID;
        else 
            gmem0_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    gmem0_blk_n_W_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage4, m_axi_gmem0_0_WREADY, ap_block_pp0_stage4_grp1, ap_block_pp0_stage0_grp2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_grp3, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_grp4, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_grp5)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_grp1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_grp2)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_grp5)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_grp4)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_grp3)))) then 
            gmem0_blk_n_W <= m_axi_gmem0_0_WREADY;
        else 
            gmem0_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_265_ce_assign_proc : process(ap_ce, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage2_11001_grp0, ap_block_pp0_stage2_subdone_grp0_done_reg, ap_block_pp0_stage3_11001_grp0, ap_block_pp0_stage3_subdone_grp0_done_reg)
    begin
        if (((ap_const_logic_1 = ap_ce) and (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001_grp0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001_grp0))))) then 
            grp_fu_265_ce <= ap_const_logic_1;
        else 
            grp_fu_265_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_265_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln21_reg_896),43));
    grp_fu_265_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln21_reg_907),43));

    grp_fu_372_ce_assign_proc : process(ap_CS_fsm_pp0_stage4, ap_ce, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001_grp0, ap_block_pp0_stage3_subdone_grp0_done_reg, ap_block_pp0_stage4_11001_grp0, ap_block_pp0_stage4_subdone_grp0_done_reg)
    begin
        if (((ap_const_logic_1 = ap_ce) and (((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001_grp0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001_grp0))))) then 
            grp_fu_372_ce <= ap_const_logic_1;
        else 
            grp_fu_372_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_372_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln21_2_reg_922),43));
    grp_fu_372_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln21_3_reg_948),43));

    grp_fu_511_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage4, ap_ce, ap_block_pp0_stage0_11001_grp0, ap_block_pp0_stage0_subdone_grp0_done_reg, ap_block_pp0_stage4_11001_grp0, ap_block_pp0_stage4_subdone_grp0_done_reg)
    begin
        if (((ap_const_logic_1 = ap_ce) and (((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001_grp0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp0))))) then 
            grp_fu_511_ce <= ap_const_logic_1;
        else 
            grp_fu_511_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_511_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln21_4_reg_963),43));
    grp_fu_511_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln21_5_reg_999),43));

    grp_fu_650_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_ce, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001_grp0, ap_block_pp0_stage0_subdone_grp0_done_reg, ap_block_pp0_stage1_11001_grp0, ap_block_pp0_stage1_subdone_grp0_done_reg)
    begin
        if (((ap_const_logic_1 = ap_ce) and (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001_grp0))))) then 
            grp_fu_650_ce <= ap_const_logic_1;
        else 
            grp_fu_650_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_650_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln21_6_reg_1014),43));
    grp_fu_650_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln21_7_reg_1060),43));

    grp_fu_751_ce_assign_proc : process(ap_ce, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage1_11001_grp0, ap_block_pp0_stage1_subdone_grp0_done_reg, ap_block_pp0_stage2_11001_grp0, ap_block_pp0_stage2_subdone_grp0_done_reg)
    begin
        if (((ap_const_logic_1 = ap_ce) and (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001_grp0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001_grp0))))) then 
            grp_fu_751_ce <= ap_const_logic_1;
        else 
            grp_fu_751_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_751_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln21_8_reg_1075),43));
    grp_fu_751_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln21_9_reg_1126),43));
    icmp_ln21_1_fu_231_p2 <= "1" when (ap_port_reg_p_read1 = ap_const_lv18_0) else "0";
    icmp_ln21_2_fu_318_p2 <= "1" when (ap_port_reg_p_read2 = ap_const_lv18_0) else "0";
    icmp_ln21_3_fu_395_p2 <= "1" when (ap_port_reg_p_read3 = ap_const_lv18_0) else "0";
    icmp_ln21_4_fu_534_p2 <= "1" when (ap_port_reg_p_read4 = ap_const_lv18_0) else "0";
    icmp_ln21_fu_186_p2 <= "1" when (p_read = ap_const_lv18_0) else "0";
    m_axi_gmem0_0_ARADDR <= ap_const_lv32_0;
    m_axi_gmem0_0_ARBURST <= ap_const_lv2_0;
    m_axi_gmem0_0_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem0_0_ARID <= ap_const_lv1_0;
    m_axi_gmem0_0_ARLEN <= ap_const_lv32_0;
    m_axi_gmem0_0_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem0_0_ARPROT <= ap_const_lv3_0;
    m_axi_gmem0_0_ARQOS <= ap_const_lv4_0;
    m_axi_gmem0_0_ARREGION <= ap_const_lv4_0;
    m_axi_gmem0_0_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem0_0_ARUSER <= ap_const_lv1_0;
    m_axi_gmem0_0_ARVALID <= ap_const_logic_0;
    m_axi_gmem0_0_AWADDR <= sext_ln21_fu_562_p1;
    m_axi_gmem0_0_AWBURST <= ap_const_lv2_0;
    m_axi_gmem0_0_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem0_0_AWID <= ap_const_lv1_0;
    m_axi_gmem0_0_AWLEN <= ap_const_lv32_5;
    m_axi_gmem0_0_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem0_0_AWPROT <= ap_const_lv3_0;
    m_axi_gmem0_0_AWQOS <= ap_const_lv4_0;
    m_axi_gmem0_0_AWREGION <= ap_const_lv4_0;
    m_axi_gmem0_0_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem0_0_AWUSER <= ap_const_lv1_0;

    m_axi_gmem0_0_AWVALID_assign_proc : process(ap_CS_fsm_pp0_stage4, ap_enable_reg_pp0_iter0_reg, ap_ce, ap_block_pp0_stage4_11001_grp1)
    begin
        if (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001_grp1))) then 
            m_axi_gmem0_0_AWVALID <= ap_const_logic_1;
        else 
            m_axi_gmem0_0_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_gmem0_0_BREADY_assign_proc : process(ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage4, ap_ce, ap_block_pp0_stage4_11001_grp1)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001_grp1))) then 
            m_axi_gmem0_0_BREADY <= ap_const_logic_1;
        else 
            m_axi_gmem0_0_BREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem0_0_RREADY <= ap_const_logic_0;

    m_axi_gmem0_0_WDATA_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage4, ap_ce, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, empty_reg_1025, empty_30_reg_1091, empty_31_reg_1131, empty_32_reg_1161, empty_33_reg_1181, ap_block_pp0_stage0_01001_grp2, ap_block_pp0_stage1_01001_grp3, ap_block_pp0_stage2_01001_grp4, ap_block_pp0_stage3_01001_grp5, ap_block_pp0_stage4_01001_grp1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce))) then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_01001_grp1))) then 
                m_axi_gmem0_0_WDATA <= empty_33_reg_1181;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_01001_grp5))) then 
                m_axi_gmem0_0_WDATA <= empty_32_reg_1161;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_01001_grp4))) then 
                m_axi_gmem0_0_WDATA <= empty_31_reg_1131;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_01001_grp3))) then 
                m_axi_gmem0_0_WDATA <= empty_30_reg_1091;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_01001_grp2))) then 
                m_axi_gmem0_0_WDATA <= empty_reg_1025;
            else 
                m_axi_gmem0_0_WDATA <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            m_axi_gmem0_0_WDATA <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_gmem0_0_WID <= ap_const_lv1_0;
    m_axi_gmem0_0_WLAST <= ap_const_logic_0;
    m_axi_gmem0_0_WSTRB <= ap_const_lv4_F;
    m_axi_gmem0_0_WUSER <= ap_const_lv1_0;

    m_axi_gmem0_0_WVALID_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage4, ap_ce, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage4_11001_grp1, ap_block_pp0_stage0_11001_grp2, ap_block_pp0_stage1_11001_grp3, ap_block_pp0_stage2_11001_grp4, ap_block_pp0_stage3_11001_grp5)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001_grp1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp2)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001_grp5)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001_grp4)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001_grp3)))) then 
            m_axi_gmem0_0_WVALID <= ap_const_logic_1;
        else 
            m_axi_gmem0_0_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    p_shl1_fu_287_p3 <= (trunc_ln21_2_fu_283_p1 & ap_const_lv2_0);
    p_shl_fu_275_p3 <= (trunc_ln21_1_fu_271_p1 & ap_const_lv4_0);
    pi_assign_1_fu_606_p5 <= (zext_ln21_5_fu_572_p1(63 downto 32) & tmp_3_fu_599_p3 & zext_ln21_5_fu_572_p1(22 downto 0));
    pi_assign_2_fu_707_p5 <= (zext_ln21_8_fu_673_p1(63 downto 32) & tmp_s_fu_700_p3 & zext_ln21_8_fu_673_p1(22 downto 0));
    pi_assign_3_fu_791_p5 <= (zext_ln21_11_fu_757_p1(63 downto 32) & tmp_12_fu_784_p3 & zext_ln21_11_fu_757_p1(22 downto 0));
    pi_assign_4_fu_863_p5 <= (zext_ln21_14_fu_829_p1(63 downto 32) & tmp_16_fu_856_p3 & zext_ln21_14_fu_829_p1(22 downto 0));
    pi_assign_fu_467_p5 <= (zext_ln21_2_fu_433_p1(63 downto 32) & tmp_2_fu_460_p3 & zext_ln21_2_fu_433_p1(22 downto 0));
    select_ln21_1_fu_443_p3 <= 
        ap_const_lv8_7F when (tmp_4_fu_436_p3(0) = '1') else 
        ap_const_lv8_7E;
    select_ln21_2_fu_251_p3 <= 
        sub_ln21_2_fu_245_p2 when (tmp_6_fu_237_p3(0) = '1') else 
        ap_port_reg_p_read1;
    select_ln21_3_fu_582_p3 <= 
        ap_const_lv8_7F when (tmp_7_fu_575_p3(0) = '1') else 
        ap_const_lv8_7E;
    select_ln21_4_fu_338_p3 <= 
        sub_ln21_4_fu_332_p2 when (tmp_9_fu_324_p3(0) = '1') else 
        ap_port_reg_p_read2;
    select_ln21_5_fu_683_p3 <= 
        ap_const_lv8_7F when (tmp_11_fu_676_p3(0) = '1') else 
        ap_const_lv8_7E;
    select_ln21_6_fu_415_p3 <= 
        sub_ln21_6_fu_409_p2 when (tmp_13_fu_401_p3(0) = '1') else 
        ap_port_reg_p_read3;
    select_ln21_7_fu_767_p3 <= 
        ap_const_lv8_7F when (tmp_15_fu_760_p3(0) = '1') else 
        ap_const_lv8_7E;
    select_ln21_8_fu_554_p3 <= 
        sub_ln21_8_fu_548_p2 when (tmp_17_fu_540_p3(0) = '1') else 
        ap_port_reg_p_read4;
    select_ln21_9_fu_839_p3 <= 
        ap_const_lv8_7F when (tmp_19_fu_832_p3(0) = '1') else 
        ap_const_lv8_7E;
    select_ln21_fu_206_p3 <= 
        sub_ln21_fu_200_p2 when (tmp_fu_192_p3(0) = '1') else 
        p_read;
        sext_ln21_1_fu_451_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln21_1_reg_979),8));

        sext_ln21_2_fu_590_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln21_3_reg_1040),8));

        sext_ln21_3_fu_691_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln21_5_reg_1106),8));

        sext_ln21_4_fu_775_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln21_7_reg_1146),8));

        sext_ln21_5_fu_847_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln21_9_reg_1176),8));

        sext_ln21_fu_562_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln21_5_reg_1020),32));

    sub_ln21_1_fu_356_p2 <= std_logic_vector(unsigned(ap_const_lv5_8) - unsigned(trunc_ln21_reg_902));
    sub_ln21_2_fu_245_p2 <= std_logic_vector(unsigned(ap_const_lv18_0) - unsigned(ap_port_reg_p_read1));
    sub_ln21_3_fu_500_p2 <= std_logic_vector(unsigned(ap_const_lv5_8) - unsigned(trunc_ln21_3_reg_943));
    sub_ln21_4_fu_332_p2 <= std_logic_vector(unsigned(ap_const_lv18_0) - unsigned(ap_port_reg_p_read2));
    sub_ln21_5_fu_639_p2 <= std_logic_vector(unsigned(ap_const_lv5_8) - unsigned(trunc_ln21_4_reg_994));
    sub_ln21_6_fu_409_p2 <= std_logic_vector(unsigned(ap_const_lv18_0) - unsigned(ap_port_reg_p_read3));
    sub_ln21_7_fu_740_p2 <= std_logic_vector(unsigned(ap_const_lv5_8) - unsigned(trunc_ln21_6_reg_1055));
    sub_ln21_8_fu_548_p2 <= std_logic_vector(unsigned(ap_const_lv18_0) - unsigned(ap_port_reg_p_read4));
    sub_ln21_9_fu_824_p2 <= std_logic_vector(unsigned(ap_const_lv5_8) - unsigned(trunc_ln21_7_reg_1121));
    sub_ln21_fu_200_p2 <= std_logic_vector(unsigned(ap_const_lv18_0) - unsigned(p_read));
    tmp_11_fu_676_p3 <= shl_ln21_2_reg_1096(25 downto 25);
    tmp_12_fu_784_p3 <= (tmp_13_reg_1009 & add_ln21_8_fu_778_p2);
    tmp_13_fu_401_p3 <= ap_port_reg_p_read3(17 downto 17);
    tmp_15_fu_760_p3 <= shl_ln21_3_reg_1136(25 downto 25);
    tmp_16_fu_856_p3 <= (tmp_17_reg_1070 & add_ln21_10_fu_850_p2);
    tmp_17_fu_540_p3 <= ap_port_reg_p_read4(17 downto 17);
    tmp_19_fu_832_p3 <= shl_ln21_4_reg_1166(25 downto 25);
    tmp_2_fu_460_p3 <= (tmp_reg_891 & add_ln21_1_fu_454_p2);
    tmp_3_fu_599_p3 <= (tmp_6_reg_917 & add_ln21_4_fu_593_p2);
    tmp_4_fu_436_p3 <= shl_ln21_reg_969(25 downto 25);
    tmp_6_fu_237_p3 <= ap_port_reg_p_read1(17 downto 17);
    tmp_7_fu_575_p3 <= shl_ln21_1_reg_1030(25 downto 25);
    tmp_9_fu_324_p3 <= ap_port_reg_p_read2(17 downto 17);
    tmp_fu_192_p3 <= p_read(17 downto 17);
    tmp_s_fu_700_p3 <= (tmp_9_reg_958 & add_ln21_6_fu_694_p2);
    trunc_ln21_1_fu_271_p1 <= ap_port_reg_n(28 - 1 downto 0);
    trunc_ln21_2_fu_283_p1 <= ap_port_reg_n(30 - 1 downto 0);
    trunc_ln21_3_fu_308_p1 <= tmp_8_fu_301_p3(5 - 1 downto 0);
    trunc_ln21_4_fu_385_p1 <= tmp_5_fu_378_p3(5 - 1 downto 0);
    trunc_ln21_6_fu_524_p1 <= tmp_10_fu_517_p3(5 - 1 downto 0);
    trunc_ln21_7_fu_663_p1 <= tmp_14_fu_656_p3(5 - 1 downto 0);
    trunc_ln21_fu_221_p1 <= tmp_1_fu_214_p3(5 - 1 downto 0);
    zext_ln21_11_fu_757_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln21_3_reg_1141),64));
    zext_ln21_14_fu_829_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln21_4_reg_1171),64));
    zext_ln21_2_fu_433_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_reg_974),64));
    zext_ln21_5_fu_572_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln21_1_reg_1035),64));
    zext_ln21_8_fu_673_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln21_2_reg_1101),64));
end behav;
