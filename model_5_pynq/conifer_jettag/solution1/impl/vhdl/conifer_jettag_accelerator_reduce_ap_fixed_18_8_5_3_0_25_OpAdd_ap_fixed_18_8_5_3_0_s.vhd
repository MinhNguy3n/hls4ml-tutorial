-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conifer_jettag_accelerator_reduce_ap_fixed_18_8_5_3_0_25_OpAdd_ap_fixed_18_8_5_3_0_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    x_0_val1 : IN STD_LOGIC_VECTOR (17 downto 0);
    x_1_val2 : IN STD_LOGIC_VECTOR (17 downto 0);
    x_2_val3 : IN STD_LOGIC_VECTOR (17 downto 0);
    x_3_val4 : IN STD_LOGIC_VECTOR (17 downto 0);
    x_4_val5 : IN STD_LOGIC_VECTOR (17 downto 0);
    x_5_val6 : IN STD_LOGIC_VECTOR (17 downto 0);
    x_6_val7 : IN STD_LOGIC_VECTOR (17 downto 0);
    x_7_val8 : IN STD_LOGIC_VECTOR (17 downto 0);
    x_8_val9 : IN STD_LOGIC_VECTOR (17 downto 0);
    x_9_val10 : IN STD_LOGIC_VECTOR (17 downto 0);
    x_10_val11 : IN STD_LOGIC_VECTOR (17 downto 0);
    x_11_val12 : IN STD_LOGIC_VECTOR (17 downto 0);
    x_12_val13 : IN STD_LOGIC_VECTOR (17 downto 0);
    x_13_val14 : IN STD_LOGIC_VECTOR (17 downto 0);
    x_14_val15 : IN STD_LOGIC_VECTOR (17 downto 0);
    x_15_val16 : IN STD_LOGIC_VECTOR (17 downto 0);
    x_16_val : IN STD_LOGIC_VECTOR (17 downto 0);
    x_17_val : IN STD_LOGIC_VECTOR (17 downto 0);
    x_18_val : IN STD_LOGIC_VECTOR (17 downto 0);
    x_19_val : IN STD_LOGIC_VECTOR (17 downto 0);
    x_20_val : IN STD_LOGIC_VECTOR (17 downto 0);
    x_21_val : IN STD_LOGIC_VECTOR (17 downto 0);
    x_22_val : IN STD_LOGIC_VECTOR (17 downto 0);
    x_23_val : IN STD_LOGIC_VECTOR (17 downto 0);
    x_24_val : IN STD_LOGIC_VECTOR (17 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (17 downto 0);
    ap_ce : IN STD_LOGIC );
end;


architecture behav of conifer_jettag_accelerator_reduce_ap_fixed_18_8_5_3_0_25_OpAdd_ap_fixed_18_8_5_3_0_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;

attribute shreg_extract : string;
    signal x_22_val_read_reg_316 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal x_19_val_read_reg_321 : STD_LOGIC_VECTOR (17 downto 0);
    signal x_17_val_read_reg_326 : STD_LOGIC_VECTOR (17 downto 0);
    signal x_15_val16_read_reg_331 : STD_LOGIC_VECTOR (17 downto 0);
    signal x_12_val13_read_reg_336 : STD_LOGIC_VECTOR (17 downto 0);
    signal x_9_val10_read_reg_341 : STD_LOGIC_VECTOR (17 downto 0);
    signal x_6_val7_read_reg_346 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln34_fu_202_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln34_reg_351 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln34_2_fu_208_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln34_2_reg_356 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln34_5_fu_214_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln34_5_reg_361 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln34_7_fu_220_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln34_7_reg_366 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln34_12_fu_226_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln34_12_reg_371 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln34_14_fu_232_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln34_14_reg_376 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln34_17_fu_238_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln34_17_reg_381 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln34_19_fu_244_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln34_19_reg_386 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln34_20_fu_250_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln34_20_reg_391 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln34_1_fu_256_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln34_1_reg_396 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln34_3_fu_260_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln34_3_reg_401 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln34_6_fu_264_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln34_6_reg_406 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln34_9_fu_268_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln34_9_reg_411 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln34_13_fu_272_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln34_13_reg_416 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln34_15_fu_276_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln34_15_reg_421 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln34_18_fu_280_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln34_18_reg_426 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln34_21_fu_284_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln34_21_reg_431 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln34_4_fu_288_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln34_4_reg_436 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln34_10_fu_292_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln34_10_reg_441 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln34_16_fu_296_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln34_16_reg_446 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln34_22_fu_300_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln34_22_reg_451 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln34_11_fu_304_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln34_11_reg_456 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln34_23_fu_308_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln34_23_reg_461 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal add_ln34_8_fu_312_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_ce_reg : STD_LOGIC;
    signal x_0_val1_int_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal x_1_val2_int_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal x_2_val3_int_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal x_3_val4_int_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal x_4_val5_int_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal x_5_val6_int_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal x_6_val7_int_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal x_7_val8_int_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal x_8_val9_int_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal x_9_val10_int_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal x_10_val11_int_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal x_11_val12_int_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal x_12_val13_int_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal x_13_val14_int_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal x_14_val15_int_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal x_15_val16_int_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal x_16_val_int_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal x_17_val_int_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal x_18_val_int_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal x_19_val_int_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal x_20_val_int_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal x_21_val_int_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal x_22_val_int_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal x_23_val_int_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal x_24_val_int_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_return_int_reg : STD_LOGIC_VECTOR (17 downto 0);


begin




    ap_ce_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_ce_reg <= ap_ce;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then
                add_ln34_10_reg_441 <= add_ln34_10_fu_292_p2;
                add_ln34_11_reg_456 <= add_ln34_11_fu_304_p2;
                add_ln34_12_reg_371 <= add_ln34_12_fu_226_p2;
                add_ln34_13_reg_416 <= add_ln34_13_fu_272_p2;
                add_ln34_14_reg_376 <= add_ln34_14_fu_232_p2;
                add_ln34_15_reg_421 <= add_ln34_15_fu_276_p2;
                add_ln34_16_reg_446 <= add_ln34_16_fu_296_p2;
                add_ln34_17_reg_381 <= add_ln34_17_fu_238_p2;
                add_ln34_18_reg_426 <= add_ln34_18_fu_280_p2;
                add_ln34_19_reg_386 <= add_ln34_19_fu_244_p2;
                add_ln34_1_reg_396 <= add_ln34_1_fu_256_p2;
                add_ln34_20_reg_391 <= add_ln34_20_fu_250_p2;
                add_ln34_21_reg_431 <= add_ln34_21_fu_284_p2;
                add_ln34_22_reg_451 <= add_ln34_22_fu_300_p2;
                add_ln34_23_reg_461 <= add_ln34_23_fu_308_p2;
                add_ln34_2_reg_356 <= add_ln34_2_fu_208_p2;
                add_ln34_3_reg_401 <= add_ln34_3_fu_260_p2;
                add_ln34_4_reg_436 <= add_ln34_4_fu_288_p2;
                add_ln34_5_reg_361 <= add_ln34_5_fu_214_p2;
                add_ln34_6_reg_406 <= add_ln34_6_fu_264_p2;
                add_ln34_7_reg_366 <= add_ln34_7_fu_220_p2;
                add_ln34_9_reg_411 <= add_ln34_9_fu_268_p2;
                add_ln34_reg_351 <= add_ln34_fu_202_p2;
                x_12_val13_read_reg_336 <= x_12_val13_int_reg;
                x_15_val16_read_reg_331 <= x_15_val16_int_reg;
                x_17_val_read_reg_326 <= x_17_val_int_reg;
                x_19_val_read_reg_321 <= x_19_val_int_reg;
                x_22_val_read_reg_316 <= x_22_val_int_reg;
                x_6_val7_read_reg_346 <= x_6_val7_int_reg;
                x_9_val10_read_reg_341 <= x_9_val10_int_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_ce_reg)) then
                ap_return_int_reg <= add_ln34_8_fu_312_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_ce)) then
                x_0_val1_int_reg <= x_0_val1;
                x_10_val11_int_reg <= x_10_val11;
                x_11_val12_int_reg <= x_11_val12;
                x_12_val13_int_reg <= x_12_val13;
                x_13_val14_int_reg <= x_13_val14;
                x_14_val15_int_reg <= x_14_val15;
                x_15_val16_int_reg <= x_15_val16;
                x_16_val_int_reg <= x_16_val;
                x_17_val_int_reg <= x_17_val;
                x_18_val_int_reg <= x_18_val;
                x_19_val_int_reg <= x_19_val;
                x_1_val2_int_reg <= x_1_val2;
                x_20_val_int_reg <= x_20_val;
                x_21_val_int_reg <= x_21_val;
                x_22_val_int_reg <= x_22_val;
                x_23_val_int_reg <= x_23_val;
                x_24_val_int_reg <= x_24_val;
                x_2_val3_int_reg <= x_2_val3;
                x_3_val4_int_reg <= x_3_val4;
                x_4_val5_int_reg <= x_4_val5;
                x_5_val6_int_reg <= x_5_val6;
                x_6_val7_int_reg <= x_6_val7;
                x_7_val8_int_reg <= x_7_val8;
                x_8_val9_int_reg <= x_8_val9;
                x_9_val10_int_reg <= x_9_val10;
            end if;
        end if;
    end process;
    add_ln34_10_fu_292_p2 <= std_logic_vector(unsigned(add_ln34_9_reg_411) + unsigned(add_ln34_6_reg_406));
    add_ln34_11_fu_304_p2 <= std_logic_vector(unsigned(add_ln34_10_reg_441) + unsigned(add_ln34_4_reg_436));
    add_ln34_12_fu_226_p2 <= std_logic_vector(unsigned(x_11_val12_int_reg) + unsigned(x_10_val11_int_reg));
    add_ln34_13_fu_272_p2 <= std_logic_vector(unsigned(add_ln34_12_reg_371) + unsigned(x_12_val13_read_reg_336));
    add_ln34_14_fu_232_p2 <= std_logic_vector(unsigned(x_8_val9_int_reg) + unsigned(x_7_val8_int_reg));
    add_ln34_15_fu_276_p2 <= std_logic_vector(unsigned(add_ln34_14_reg_376) + unsigned(x_9_val10_read_reg_341));
    add_ln34_16_fu_296_p2 <= std_logic_vector(unsigned(add_ln34_15_reg_421) + unsigned(add_ln34_13_reg_416));
    add_ln34_17_fu_238_p2 <= std_logic_vector(unsigned(x_5_val6_int_reg) + unsigned(x_4_val5_int_reg));
    add_ln34_18_fu_280_p2 <= std_logic_vector(unsigned(add_ln34_17_reg_381) + unsigned(x_6_val7_read_reg_346));
    add_ln34_19_fu_244_p2 <= std_logic_vector(unsigned(x_3_val4_int_reg) + unsigned(x_2_val3_int_reg));
    add_ln34_1_fu_256_p2 <= std_logic_vector(unsigned(add_ln34_reg_351) + unsigned(x_17_val_read_reg_326));
    add_ln34_20_fu_250_p2 <= std_logic_vector(unsigned(x_0_val1_int_reg) + unsigned(x_1_val2_int_reg));
    add_ln34_21_fu_284_p2 <= std_logic_vector(unsigned(add_ln34_20_reg_391) + unsigned(add_ln34_19_reg_386));
    add_ln34_22_fu_300_p2 <= std_logic_vector(unsigned(add_ln34_21_reg_431) + unsigned(add_ln34_18_reg_426));
    add_ln34_23_fu_308_p2 <= std_logic_vector(unsigned(add_ln34_22_reg_451) + unsigned(add_ln34_16_reg_446));
    add_ln34_2_fu_208_p2 <= std_logic_vector(unsigned(x_20_val_int_reg) + unsigned(x_21_val_int_reg));
    add_ln34_3_fu_260_p2 <= std_logic_vector(unsigned(add_ln34_2_reg_356) + unsigned(x_19_val_read_reg_321));
    add_ln34_4_fu_288_p2 <= std_logic_vector(unsigned(add_ln34_3_reg_401) + unsigned(add_ln34_1_reg_396));
    add_ln34_5_fu_214_p2 <= std_logic_vector(unsigned(x_23_val_int_reg) + unsigned(x_24_val_int_reg));
    add_ln34_6_fu_264_p2 <= std_logic_vector(unsigned(add_ln34_5_reg_361) + unsigned(x_22_val_read_reg_316));
    add_ln34_7_fu_220_p2 <= std_logic_vector(unsigned(x_14_val15_int_reg) + unsigned(x_13_val14_int_reg));
    add_ln34_8_fu_312_p2 <= std_logic_vector(unsigned(add_ln34_23_reg_461) + unsigned(add_ln34_11_reg_456));
    add_ln34_9_fu_268_p2 <= std_logic_vector(unsigned(add_ln34_7_reg_366) + unsigned(x_15_val16_read_reg_331));
    add_ln34_fu_202_p2 <= std_logic_vector(unsigned(x_16_val_int_reg) + unsigned(x_18_val_int_reg));
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_return_assign_proc : process(add_ln34_8_fu_312_p2, ap_ce_reg, ap_return_int_reg)
    begin
        if ((ap_const_logic_0 = ap_ce_reg)) then 
            ap_return <= ap_return_int_reg;
        elsif ((ap_const_logic_1 = ap_ce_reg)) then 
            ap_return <= add_ln34_8_fu_312_p2;
        else 
            ap_return <= "XXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

end behav;
