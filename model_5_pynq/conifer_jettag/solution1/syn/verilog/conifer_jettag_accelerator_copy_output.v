// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module conifer_jettag_accelerator_copy_output (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_gmem0_0_AWVALID,
        m_axi_gmem0_0_AWREADY,
        m_axi_gmem0_0_AWADDR,
        m_axi_gmem0_0_AWID,
        m_axi_gmem0_0_AWLEN,
        m_axi_gmem0_0_AWSIZE,
        m_axi_gmem0_0_AWBURST,
        m_axi_gmem0_0_AWLOCK,
        m_axi_gmem0_0_AWCACHE,
        m_axi_gmem0_0_AWPROT,
        m_axi_gmem0_0_AWQOS,
        m_axi_gmem0_0_AWREGION,
        m_axi_gmem0_0_AWUSER,
        m_axi_gmem0_0_WVALID,
        m_axi_gmem0_0_WREADY,
        m_axi_gmem0_0_WDATA,
        m_axi_gmem0_0_WSTRB,
        m_axi_gmem0_0_WLAST,
        m_axi_gmem0_0_WID,
        m_axi_gmem0_0_WUSER,
        m_axi_gmem0_0_ARVALID,
        m_axi_gmem0_0_ARREADY,
        m_axi_gmem0_0_ARADDR,
        m_axi_gmem0_0_ARID,
        m_axi_gmem0_0_ARLEN,
        m_axi_gmem0_0_ARSIZE,
        m_axi_gmem0_0_ARBURST,
        m_axi_gmem0_0_ARLOCK,
        m_axi_gmem0_0_ARCACHE,
        m_axi_gmem0_0_ARPROT,
        m_axi_gmem0_0_ARQOS,
        m_axi_gmem0_0_ARREGION,
        m_axi_gmem0_0_ARUSER,
        m_axi_gmem0_0_RVALID,
        m_axi_gmem0_0_RREADY,
        m_axi_gmem0_0_RDATA,
        m_axi_gmem0_0_RLAST,
        m_axi_gmem0_0_RID,
        m_axi_gmem0_0_RFIFONUM,
        m_axi_gmem0_0_RUSER,
        m_axi_gmem0_0_RRESP,
        m_axi_gmem0_0_BVALID,
        m_axi_gmem0_0_BREADY,
        m_axi_gmem0_0_BRESP,
        m_axi_gmem0_0_BID,
        m_axi_gmem0_0_BUSER,
        ap_ce,
        n,
        p_read,
        p_read1,
        p_read2,
        p_read3,
        p_read4,
        score_out,
        gmem0_blk_n_AW,
        gmem0_blk_n_W,
        gmem0_blk_n_B
);

parameter    ap_ST_fsm_pp0_stage0 = 5'd1;
parameter    ap_ST_fsm_pp0_stage1 = 5'd2;
parameter    ap_ST_fsm_pp0_stage2 = 5'd4;
parameter    ap_ST_fsm_pp0_stage3 = 5'd8;
parameter    ap_ST_fsm_pp0_stage4 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem0_0_AWVALID;
input   m_axi_gmem0_0_AWREADY;
output  [31:0] m_axi_gmem0_0_AWADDR;
output  [0:0] m_axi_gmem0_0_AWID;
output  [31:0] m_axi_gmem0_0_AWLEN;
output  [2:0] m_axi_gmem0_0_AWSIZE;
output  [1:0] m_axi_gmem0_0_AWBURST;
output  [1:0] m_axi_gmem0_0_AWLOCK;
output  [3:0] m_axi_gmem0_0_AWCACHE;
output  [2:0] m_axi_gmem0_0_AWPROT;
output  [3:0] m_axi_gmem0_0_AWQOS;
output  [3:0] m_axi_gmem0_0_AWREGION;
output  [0:0] m_axi_gmem0_0_AWUSER;
output   m_axi_gmem0_0_WVALID;
input   m_axi_gmem0_0_WREADY;
output  [31:0] m_axi_gmem0_0_WDATA;
output  [3:0] m_axi_gmem0_0_WSTRB;
output   m_axi_gmem0_0_WLAST;
output  [0:0] m_axi_gmem0_0_WID;
output  [0:0] m_axi_gmem0_0_WUSER;
output   m_axi_gmem0_0_ARVALID;
input   m_axi_gmem0_0_ARREADY;
output  [31:0] m_axi_gmem0_0_ARADDR;
output  [0:0] m_axi_gmem0_0_ARID;
output  [31:0] m_axi_gmem0_0_ARLEN;
output  [2:0] m_axi_gmem0_0_ARSIZE;
output  [1:0] m_axi_gmem0_0_ARBURST;
output  [1:0] m_axi_gmem0_0_ARLOCK;
output  [3:0] m_axi_gmem0_0_ARCACHE;
output  [2:0] m_axi_gmem0_0_ARPROT;
output  [3:0] m_axi_gmem0_0_ARQOS;
output  [3:0] m_axi_gmem0_0_ARREGION;
output  [0:0] m_axi_gmem0_0_ARUSER;
input   m_axi_gmem0_0_RVALID;
output   m_axi_gmem0_0_RREADY;
input  [31:0] m_axi_gmem0_0_RDATA;
input   m_axi_gmem0_0_RLAST;
input  [0:0] m_axi_gmem0_0_RID;
input  [8:0] m_axi_gmem0_0_RFIFONUM;
input  [0:0] m_axi_gmem0_0_RUSER;
input  [1:0] m_axi_gmem0_0_RRESP;
input   m_axi_gmem0_0_BVALID;
output   m_axi_gmem0_0_BREADY;
input  [1:0] m_axi_gmem0_0_BRESP;
input  [0:0] m_axi_gmem0_0_BID;
input  [0:0] m_axi_gmem0_0_BUSER;
input   ap_ce;
input  [30:0] n;
input  [17:0] p_read;
input  [17:0] p_read1;
input  [17:0] p_read2;
input  [17:0] p_read3;
input  [17:0] p_read4;
input  [31:0] score_out;
output   gmem0_blk_n_AW;
output   gmem0_blk_n_W;
output   gmem0_blk_n_B;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_gmem0_0_AWVALID;
reg m_axi_gmem0_0_WVALID;
reg[31:0] m_axi_gmem0_0_WDATA;
reg m_axi_gmem0_0_BREADY;
reg gmem0_blk_n_AW;
reg gmem0_blk_n_W;
reg gmem0_blk_n_B;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage4;
reg    ap_enable_reg_pp0_iter0_reg;
reg    ap_block_pp0_stage4_subdone;
wire    ap_block_pp0_stage4_grp1;
wire    ap_block_pp0_stage0_grp2;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1_grp3;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2_grp4;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_pp0_stage3_grp5;
wire   [0:0] icmp_ln21_fu_186_p2;
reg   [0:0] icmp_ln21_reg_886;
wire    ap_block_pp0_stage0_11001_grp0;
reg    ap_block_pp0_stage0_subdone_grp0_done_reg;
reg    ap_block_pp0_stage0_subdone_grp0;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] tmp_fu_192_p3;
reg   [0:0] tmp_reg_891;
wire   [17:0] select_ln21_fu_206_p3;
reg   [17:0] select_ln21_reg_896;
wire   [4:0] trunc_ln21_fu_221_p1;
reg   [4:0] trunc_ln21_reg_902;
wire    ap_block_pp0_stage1_11001_grp0;
reg    ap_block_pp0_stage1_subdone_grp0_done_reg;
reg    ap_block_pp0_stage1_subdone_grp0;
reg    ap_block_pp0_stage1_subdone;
wire   [4:0] add_ln21_fu_225_p2;
reg   [4:0] add_ln21_reg_907;
wire   [0:0] icmp_ln21_1_fu_231_p2;
reg   [0:0] icmp_ln21_1_reg_912;
wire   [0:0] tmp_6_fu_237_p3;
reg   [0:0] tmp_6_reg_917;
wire   [17:0] select_ln21_2_fu_251_p3;
reg   [17:0] select_ln21_2_reg_922;
wire    ap_block_pp0_stage2_11001_grp0;
reg    ap_block_pp0_stage2_subdone_grp0_done_reg;
reg    ap_block_pp0_stage2_subdone_grp0;
reg    ap_block_pp0_stage2_subdone;
wire   [31:0] add_ln21_11_fu_295_p2;
reg   [31:0] add_ln21_11_reg_938;
wire   [4:0] trunc_ln21_3_fu_308_p1;
reg   [4:0] trunc_ln21_3_reg_943;
wire   [4:0] add_ln21_3_fu_312_p2;
reg   [4:0] add_ln21_3_reg_948;
wire   [0:0] icmp_ln21_2_fu_318_p2;
reg   [0:0] icmp_ln21_2_reg_953;
wire   [0:0] tmp_9_fu_324_p3;
reg   [0:0] tmp_9_reg_958;
wire   [17:0] select_ln21_4_fu_338_p3;
reg   [17:0] select_ln21_4_reg_963;
wire   [42:0] grp_fu_265_p2;
reg   [42:0] shl_ln21_reg_969;
wire    ap_block_pp0_stage3_11001_grp0;
reg    ap_block_pp0_stage3_subdone_grp0_done_reg;
reg    ap_block_pp0_stage3_subdone_grp0;
reg    ap_block_pp0_stage3_subdone;
reg   [41:0] lshr_ln_reg_974;
wire   [4:0] sub_ln21_1_fu_356_p2;
reg   [4:0] sub_ln21_1_reg_979;
wire   [4:0] trunc_ln21_4_fu_385_p1;
reg   [4:0] trunc_ln21_4_reg_994;
wire   [4:0] add_ln21_5_fu_389_p2;
reg   [4:0] add_ln21_5_reg_999;
wire   [0:0] icmp_ln21_3_fu_395_p2;
reg   [0:0] icmp_ln21_3_reg_1004;
wire   [0:0] tmp_13_fu_401_p3;
reg   [0:0] tmp_13_reg_1009;
wire   [17:0] select_ln21_6_fu_415_p3;
reg   [17:0] select_ln21_6_reg_1014;
reg   [29:0] trunc_ln21_5_reg_1020;
wire   [31:0] empty_fu_483_p3;
reg   [31:0] empty_reg_1025;
wire    ap_block_pp0_stage4_11001_grp0;
reg    ap_block_pp0_stage4_subdone_grp0_done_reg;
reg    ap_block_pp0_stage4_subdone_grp0;
wire   [42:0] grp_fu_372_p2;
reg   [42:0] shl_ln21_1_reg_1030;
reg   [41:0] lshr_ln21_1_reg_1035;
wire   [4:0] sub_ln21_3_fu_500_p2;
reg   [4:0] sub_ln21_3_reg_1040;
wire   [4:0] trunc_ln21_6_fu_524_p1;
reg   [4:0] trunc_ln21_6_reg_1055;
wire   [4:0] add_ln21_7_fu_528_p2;
reg   [4:0] add_ln21_7_reg_1060;
wire   [0:0] icmp_ln21_4_fu_534_p2;
reg   [0:0] icmp_ln21_4_reg_1065;
wire   [0:0] tmp_17_fu_540_p3;
reg   [0:0] tmp_17_reg_1070;
wire   [17:0] select_ln21_8_fu_554_p3;
reg   [17:0] select_ln21_8_reg_1075;
reg    ap_block_pp0_stage4_11001_grp1;
wire   [31:0] empty_30_fu_622_p3;
reg   [31:0] empty_30_reg_1091;
wire   [42:0] grp_fu_511_p2;
reg   [42:0] shl_ln21_2_reg_1096;
reg   [41:0] lshr_ln21_2_reg_1101;
wire   [4:0] sub_ln21_5_fu_639_p2;
reg   [4:0] sub_ln21_5_reg_1106;
wire   [4:0] trunc_ln21_7_fu_663_p1;
reg   [4:0] trunc_ln21_7_reg_1121;
wire   [4:0] add_ln21_9_fu_667_p2;
reg   [4:0] add_ln21_9_reg_1126;
wire   [31:0] empty_31_fu_723_p3;
reg   [31:0] empty_31_reg_1131;
wire   [42:0] grp_fu_650_p2;
reg   [42:0] shl_ln21_3_reg_1136;
reg   [41:0] lshr_ln21_3_reg_1141;
wire   [4:0] sub_ln21_7_fu_740_p2;
reg   [4:0] sub_ln21_7_reg_1146;
wire   [31:0] empty_32_fu_807_p3;
reg   [31:0] empty_32_reg_1161;
wire   [42:0] grp_fu_751_p2;
reg   [42:0] shl_ln21_4_reg_1166;
reg   [41:0] lshr_ln21_4_reg_1171;
wire   [4:0] sub_ln21_9_fu_824_p2;
reg   [4:0] sub_ln21_9_reg_1176;
wire   [31:0] empty_33_fu_879_p3;
reg   [31:0] empty_33_reg_1181;
reg   [30:0] ap_port_reg_n;
reg    ap_block_pp0_stage0_11001;
reg   [17:0] ap_port_reg_p_read1;
reg   [17:0] ap_port_reg_p_read2;
reg   [17:0] ap_port_reg_p_read3;
reg   [17:0] ap_port_reg_p_read4;
reg   [31:0] ap_port_reg_score_out;
wire  signed [31:0] sext_ln21_fu_562_p1;
reg    ap_block_pp0_stage0_11001_grp2;
wire    ap_block_pp0_stage0_01001_grp2;
reg    ap_block_pp0_stage1_11001_grp3;
wire    ap_block_pp0_stage1_01001_grp3;
reg    ap_block_pp0_stage2_11001_grp4;
wire    ap_block_pp0_stage2_01001_grp4;
reg    ap_block_pp0_stage3_11001_grp5;
wire    ap_block_pp0_stage3_01001_grp5;
reg    ap_block_pp0_stage4_01001_grp1;
wire    ap_block_pp0_stage0_grp0;
wire   [17:0] sub_ln21_fu_200_p2;
wire    ap_block_pp0_stage1_grp0;
wire   [17:0] tmp_1_fu_214_p3;
wire   [17:0] sub_ln21_2_fu_245_p2;
wire    ap_block_pp0_stage2_grp0;
wire   [42:0] grp_fu_265_p0;
wire   [42:0] grp_fu_265_p1;
wire   [27:0] trunc_ln21_1_fu_271_p1;
wire   [29:0] trunc_ln21_2_fu_283_p1;
wire   [31:0] p_shl_fu_275_p3;
wire   [31:0] p_shl1_fu_287_p3;
wire   [17:0] tmp_8_fu_301_p3;
wire   [17:0] sub_ln21_4_fu_332_p2;
wire    ap_block_pp0_stage3_grp0;
wire   [42:0] grp_fu_372_p0;
wire   [42:0] grp_fu_372_p1;
wire   [17:0] tmp_5_fu_378_p3;
wire   [17:0] sub_ln21_6_fu_409_p2;
wire   [31:0] add_ln21_2_fu_361_p2;
wire    ap_block_pp0_stage4_grp0;
wire   [0:0] tmp_4_fu_436_p3;
wire  signed [7:0] sext_ln21_1_fu_451_p1;
wire   [7:0] select_ln21_1_fu_443_p3;
wire   [7:0] add_ln21_1_fu_454_p2;
wire   [63:0] zext_ln21_2_fu_433_p1;
wire   [8:0] tmp_2_fu_460_p3;
wire   [63:0] pi_assign_fu_467_p5;
wire   [31:0] LD_fu_479_p1;
wire   [42:0] grp_fu_511_p0;
wire   [42:0] grp_fu_511_p1;
wire   [17:0] tmp_10_fu_517_p3;
wire   [17:0] sub_ln21_8_fu_548_p2;
wire   [0:0] tmp_7_fu_575_p3;
wire  signed [7:0] sext_ln21_2_fu_590_p1;
wire   [7:0] select_ln21_3_fu_582_p3;
wire   [7:0] add_ln21_4_fu_593_p2;
wire   [63:0] zext_ln21_5_fu_572_p1;
wire   [8:0] tmp_3_fu_599_p3;
wire   [63:0] pi_assign_1_fu_606_p5;
wire   [31:0] LD_1_fu_618_p1;
wire   [42:0] grp_fu_650_p0;
wire   [42:0] grp_fu_650_p1;
wire   [17:0] tmp_14_fu_656_p3;
wire   [0:0] tmp_11_fu_676_p3;
wire  signed [7:0] sext_ln21_3_fu_691_p1;
wire   [7:0] select_ln21_5_fu_683_p3;
wire   [7:0] add_ln21_6_fu_694_p2;
wire   [63:0] zext_ln21_8_fu_673_p1;
wire   [8:0] tmp_s_fu_700_p3;
wire   [63:0] pi_assign_2_fu_707_p5;
wire   [31:0] LD_2_fu_719_p1;
wire   [42:0] grp_fu_751_p0;
wire   [42:0] grp_fu_751_p1;
wire   [0:0] tmp_15_fu_760_p3;
wire  signed [7:0] sext_ln21_4_fu_775_p1;
wire   [7:0] select_ln21_7_fu_767_p3;
wire   [7:0] add_ln21_8_fu_778_p2;
wire   [63:0] zext_ln21_11_fu_757_p1;
wire   [8:0] tmp_12_fu_784_p3;
wire   [63:0] pi_assign_3_fu_791_p5;
wire   [31:0] LD_3_fu_803_p1;
wire   [0:0] tmp_19_fu_832_p3;
wire  signed [7:0] sext_ln21_5_fu_847_p1;
wire   [7:0] select_ln21_9_fu_839_p3;
wire   [7:0] add_ln21_10_fu_850_p2;
wire   [63:0] zext_ln21_14_fu_829_p1;
wire   [8:0] tmp_16_fu_856_p3;
wire   [63:0] pi_assign_4_fu_863_p5;
wire   [31:0] LD_4_fu_875_p1;
reg    grp_fu_265_ce;
reg    grp_fu_372_ce;
reg    grp_fu_511_ce;
reg    grp_fu_650_ce;
reg    grp_fu_751_ce;
reg   [4:0] ap_NS_fsm;
reg    ap_idle_pp0_1to2;
reg    ap_idle_pp0_0to1;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire   [17:0] tmp_1_fu_214_p0;
wire   [0:0] tmp_1_fu_214_p2;
wire   [17:0] tmp_8_fu_301_p0;
wire   [0:0] tmp_8_fu_301_p2;
wire   [17:0] tmp_5_fu_378_p0;
wire   [0:0] tmp_5_fu_378_p2;
wire   [17:0] tmp_10_fu_517_p0;
wire   [0:0] tmp_10_fu_517_p2;
wire   [17:0] tmp_14_fu_656_p0;
wire   [0:0] tmp_14_fu_656_p2;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_block_pp0_stage0_subdone_grp0_done_reg = 1'b0;
#0 ap_block_pp0_stage1_subdone_grp0_done_reg = 1'b0;
#0 ap_block_pp0_stage2_subdone_grp0_done_reg = 1'b0;
#0 ap_block_pp0_stage3_subdone_grp0_done_reg = 1'b0;
#0 ap_block_pp0_stage4_subdone_grp0_done_reg = 1'b0;
end

conifer_jettag_accelerator_ctlz_18_18_1_1 #(
    .din_WIDTH( 18 ),
    .dout_WIDTH( 18 ))
ctlz_18_18_1_1_U1711(
    .din(select_ln21_reg_896),
    .dout(tmp_1_fu_214_p3)
);

conifer_jettag_accelerator_shl_43ns_5ns_43_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .OP( 0 ),
    .din0_WIDTH( 43 ),
    .din1_WIDTH( 5 ),
    .dout_WIDTH( 43 ))
shl_43ns_5ns_43_2_1_U1712(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_265_p0),
    .din1(grp_fu_265_p1),
    .ce(grp_fu_265_ce),
    .dout(grp_fu_265_p2)
);

conifer_jettag_accelerator_ctlz_18_18_1_1 #(
    .din_WIDTH( 18 ),
    .dout_WIDTH( 18 ))
ctlz_18_18_1_1_U1713(
    .din(select_ln21_2_reg_922),
    .dout(tmp_8_fu_301_p3)
);

conifer_jettag_accelerator_shl_43ns_5ns_43_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .OP( 0 ),
    .din0_WIDTH( 43 ),
    .din1_WIDTH( 5 ),
    .dout_WIDTH( 43 ))
shl_43ns_5ns_43_2_1_U1714(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_372_p0),
    .din1(grp_fu_372_p1),
    .ce(grp_fu_372_ce),
    .dout(grp_fu_372_p2)
);

conifer_jettag_accelerator_ctlz_18_18_1_1 #(
    .din_WIDTH( 18 ),
    .dout_WIDTH( 18 ))
ctlz_18_18_1_1_U1715(
    .din(select_ln21_4_reg_963),
    .dout(tmp_5_fu_378_p3)
);

conifer_jettag_accelerator_shl_43ns_5ns_43_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .OP( 0 ),
    .din0_WIDTH( 43 ),
    .din1_WIDTH( 5 ),
    .dout_WIDTH( 43 ))
shl_43ns_5ns_43_2_1_U1716(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_511_p0),
    .din1(grp_fu_511_p1),
    .ce(grp_fu_511_ce),
    .dout(grp_fu_511_p2)
);

conifer_jettag_accelerator_ctlz_18_18_1_1 #(
    .din_WIDTH( 18 ),
    .dout_WIDTH( 18 ))
ctlz_18_18_1_1_U1717(
    .din(select_ln21_6_reg_1014),
    .dout(tmp_10_fu_517_p3)
);

conifer_jettag_accelerator_shl_43ns_5ns_43_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .OP( 0 ),
    .din0_WIDTH( 43 ),
    .din1_WIDTH( 5 ),
    .dout_WIDTH( 43 ))
shl_43ns_5ns_43_2_1_U1718(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_650_p0),
    .din1(grp_fu_650_p1),
    .ce(grp_fu_650_ce),
    .dout(grp_fu_650_p2)
);

conifer_jettag_accelerator_ctlz_18_18_1_1 #(
    .din_WIDTH( 18 ),
    .dout_WIDTH( 18 ))
ctlz_18_18_1_1_U1719(
    .din(select_ln21_8_reg_1075),
    .dout(tmp_14_fu_656_p3)
);

conifer_jettag_accelerator_shl_43ns_5ns_43_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .OP( 0 ),
    .din0_WIDTH( 43 ),
    .din1_WIDTH( 5 ),
    .dout_WIDTH( 43 ))
shl_43ns_5ns_43_2_1_U1720(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_751_p0),
    .din1(grp_fu_751_p1),
    .ce(grp_fu_751_ce),
    .dout(grp_fu_751_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_block_pp0_stage0_subdone_grp0_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
                ap_block_pp0_stage0_subdone_grp0_done_reg <= 1'b0;
            end else if ((1'b0 == ap_block_pp0_stage0_subdone_grp0)) begin
                ap_block_pp0_stage0_subdone_grp0_done_reg <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_block_pp0_stage1_subdone_grp0_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage1)) begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_block_pp0_stage1_subdone_grp0_done_reg <= 1'b0;
            end else if ((1'b0 == ap_block_pp0_stage1_subdone_grp0)) begin
                ap_block_pp0_stage1_subdone_grp0_done_reg <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_block_pp0_stage2_subdone_grp0_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage2)) begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_block_pp0_stage2_subdone_grp0_done_reg <= 1'b0;
            end else if ((1'b0 == ap_block_pp0_stage2_subdone_grp0)) begin
                ap_block_pp0_stage2_subdone_grp0_done_reg <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_block_pp0_stage3_subdone_grp0_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage3)) begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_block_pp0_stage3_subdone_grp0_done_reg <= 1'b0;
            end else if ((1'b0 == ap_block_pp0_stage3_subdone_grp0)) begin
                ap_block_pp0_stage3_subdone_grp0_done_reg <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_block_pp0_stage4_subdone_grp0_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage4)) begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_block_pp0_stage4_subdone_grp0_done_reg <= 1'b0;
            end else if ((1'b0 == ap_block_pp0_stage4_subdone_grp0)) begin
                ap_block_pp0_stage4_subdone_grp0_done_reg <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_subdone))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage2_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage2_11001_grp0))) begin
        add_ln21_11_reg_938[31 : 2] <= add_ln21_11_fu_295_p2[31 : 2];
        add_ln21_3_reg_948 <= add_ln21_3_fu_312_p2;
        empty_32_reg_1161 <= empty_32_fu_807_p3;
        icmp_ln21_2_reg_953 <= icmp_ln21_2_fu_318_p2;
        lshr_ln21_4_reg_1171 <= {{grp_fu_751_p2[42:1]}};
        select_ln21_4_reg_963 <= select_ln21_4_fu_338_p3;
        shl_ln21_4_reg_1166 <= grp_fu_751_p2;
        sub_ln21_9_reg_1176 <= sub_ln21_9_fu_824_p2;
        tmp_9_reg_958 <= ap_port_reg_p_read2[32'd17];
        trunc_ln21_3_reg_943 <= trunc_ln21_3_fu_308_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage3_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage3_11001_grp0))) begin
        add_ln21_5_reg_999 <= add_ln21_5_fu_389_p2;
        empty_33_reg_1181 <= empty_33_fu_879_p3;
        icmp_ln21_3_reg_1004 <= icmp_ln21_3_fu_395_p2;
        lshr_ln_reg_974 <= {{grp_fu_265_p2[42:1]}};
        select_ln21_6_reg_1014 <= select_ln21_6_fu_415_p3;
        shl_ln21_reg_969 <= grp_fu_265_p2;
        sub_ln21_1_reg_979 <= sub_ln21_1_fu_356_p2;
        tmp_13_reg_1009 <= ap_port_reg_p_read3[32'd17];
        trunc_ln21_4_reg_994 <= trunc_ln21_4_fu_385_p1;
        trunc_ln21_5_reg_1020 <= {{add_ln21_2_fu_361_p2[31:2]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage4_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage4_11001_grp0))) begin
        add_ln21_7_reg_1060 <= add_ln21_7_fu_528_p2;
        empty_reg_1025 <= empty_fu_483_p3;
        icmp_ln21_4_reg_1065 <= icmp_ln21_4_fu_534_p2;
        lshr_ln21_1_reg_1035 <= {{grp_fu_372_p2[42:1]}};
        select_ln21_8_reg_1075 <= select_ln21_8_fu_554_p3;
        shl_ln21_1_reg_1030 <= grp_fu_372_p2;
        sub_ln21_3_reg_1040 <= sub_ln21_3_fu_500_p2;
        tmp_17_reg_1070 <= ap_port_reg_p_read4[32'd17];
        trunc_ln21_6_reg_1055 <= trunc_ln21_6_fu_524_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage0_11001_grp0))) begin
        add_ln21_9_reg_1126 <= add_ln21_9_fu_667_p2;
        empty_30_reg_1091 <= empty_30_fu_622_p3;
        icmp_ln21_reg_886 <= icmp_ln21_fu_186_p2;
        lshr_ln21_2_reg_1101 <= {{grp_fu_511_p2[42:1]}};
        select_ln21_reg_896 <= select_ln21_fu_206_p3;
        shl_ln21_2_reg_1096 <= grp_fu_511_p2;
        sub_ln21_5_reg_1106 <= sub_ln21_5_fu_639_p2;
        tmp_reg_891 <= p_read[32'd17];
        trunc_ln21_7_reg_1121 <= trunc_ln21_7_fu_663_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage1_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage1_11001_grp0))) begin
        add_ln21_reg_907 <= add_ln21_fu_225_p2;
        empty_31_reg_1131 <= empty_31_fu_723_p3;
        icmp_ln21_1_reg_912 <= icmp_ln21_1_fu_231_p2;
        lshr_ln21_3_reg_1141 <= {{grp_fu_650_p2[42:1]}};
        select_ln21_2_reg_922 <= select_ln21_2_fu_251_p3;
        shl_ln21_3_reg_1136 <= grp_fu_650_p2;
        sub_ln21_7_reg_1146 <= sub_ln21_7_fu_740_p2;
        tmp_6_reg_917 <= ap_port_reg_p_read1[32'd17];
        trunc_ln21_reg_902 <= trunc_ln21_fu_221_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_port_reg_n <= n;
        ap_port_reg_p_read1 <= p_read1;
        ap_port_reg_p_read2 <= p_read2;
        ap_port_reg_p_read3 <= p_read3;
        ap_port_reg_p_read4 <= p_read4;
        ap_port_reg_score_out <= score_out;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_subdone))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to1 = 1'b1;
    end else begin
        ap_idle_pp0_0to1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to2 = 1'b1;
    end else begin
        ap_idle_pp0_1to2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_subdone))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_idle_pp0_0to1 == 1'b1) & (ap_start == 1'b0))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_grp1))) begin
        gmem0_blk_n_AW = m_axi_gmem0_0_AWREADY;
    end else begin
        gmem0_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_grp1))) begin
        gmem0_blk_n_B = m_axi_gmem0_0_BVALID;
    end else begin
        gmem0_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_grp1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_grp2)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_grp5)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_grp4)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_grp3)))) begin
        gmem0_blk_n_W = m_axi_gmem0_0_WREADY;
    end else begin
        gmem0_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage3_11001_grp0)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage2_11001_grp0))))) begin
        grp_fu_265_ce = 1'b1;
    end else begin
        grp_fu_265_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage4_11001_grp0)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage3_11001_grp0))))) begin
        grp_fu_372_ce = 1'b1;
    end else begin
        grp_fu_372_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage4_11001_grp0)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage0_11001_grp0))))) begin
        grp_fu_511_ce = 1'b1;
    end else begin
        grp_fu_511_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage0_11001_grp0)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage1_11001_grp0))))) begin
        grp_fu_650_ce = 1'b1;
    end else begin
        grp_fu_650_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage2_11001_grp0)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage1_11001_grp0))))) begin
        grp_fu_751_ce = 1'b1;
    end else begin
        grp_fu_751_ce = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage4_11001_grp1))) begin
        m_axi_gmem0_0_AWVALID = 1'b1;
    end else begin
        m_axi_gmem0_0_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage4_11001_grp1))) begin
        m_axi_gmem0_0_BREADY = 1'b1;
    end else begin
        m_axi_gmem0_0_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_ce))) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_01001_grp1))) begin
            m_axi_gmem0_0_WDATA = empty_33_reg_1181;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_01001_grp5))) begin
            m_axi_gmem0_0_WDATA = empty_32_reg_1161;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_01001_grp4))) begin
            m_axi_gmem0_0_WDATA = empty_31_reg_1131;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_01001_grp3))) begin
            m_axi_gmem0_0_WDATA = empty_30_reg_1091;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_01001_grp2))) begin
            m_axi_gmem0_0_WDATA = empty_reg_1025;
        end else begin
            m_axi_gmem0_0_WDATA = 'bx;
        end
    end else begin
        m_axi_gmem0_0_WDATA = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage4_11001_grp1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001_grp2)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage3_11001_grp5)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage2_11001_grp4)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage1_11001_grp3)))) begin
        m_axi_gmem0_0_WVALID = 1'b1;
    end else begin
        m_axi_gmem0_0_WVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_idle_pp0_1to2 == 1'b1) & (ap_start == 1'b0)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((((ap_reset_idle_pp0 == 1'b0) & (1'b0 == ap_block_pp0_stage4_subdone)) | ((ap_reset_idle_pp0 == 1'b1) & (1'b0 == ap_block_pp0_stage4_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign LD_1_fu_618_p1 = pi_assign_1_fu_606_p5[31:0];

assign LD_2_fu_719_p1 = pi_assign_2_fu_707_p5[31:0];

assign LD_3_fu_803_p1 = pi_assign_3_fu_791_p5[31:0];

assign LD_4_fu_875_p1 = pi_assign_4_fu_863_p5[31:0];

assign LD_fu_479_p1 = pi_assign_fu_467_p5[31:0];

assign add_ln21_10_fu_850_p2 = ($signed(sext_ln21_5_fu_847_p1) + $signed(select_ln21_9_fu_839_p3));

assign add_ln21_11_fu_295_p2 = (p_shl_fu_275_p3 + p_shl1_fu_287_p3);

assign add_ln21_1_fu_454_p2 = ($signed(sext_ln21_1_fu_451_p1) + $signed(select_ln21_1_fu_443_p3));

assign add_ln21_2_fu_361_p2 = (add_ln21_11_reg_938 + ap_port_reg_score_out);

assign add_ln21_3_fu_312_p2 = (trunc_ln21_3_fu_308_p1 + 5'd7);

assign add_ln21_4_fu_593_p2 = ($signed(sext_ln21_2_fu_590_p1) + $signed(select_ln21_3_fu_582_p3));

assign add_ln21_5_fu_389_p2 = (trunc_ln21_4_fu_385_p1 + 5'd7);

assign add_ln21_6_fu_694_p2 = ($signed(sext_ln21_3_fu_691_p1) + $signed(select_ln21_5_fu_683_p3));

assign add_ln21_7_fu_528_p2 = (trunc_ln21_6_fu_524_p1 + 5'd7);

assign add_ln21_8_fu_778_p2 = ($signed(sext_ln21_4_fu_775_p1) + $signed(select_ln21_7_fu_767_p3));

assign add_ln21_9_fu_667_p2 = (trunc_ln21_7_fu_663_p1 + 5'd7);

assign add_ln21_fu_225_p2 = (trunc_ln21_fu_221_p1 + 5'd7);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0_01001_grp2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((m_axi_gmem0_0_WREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp0_stage0_11001_grp0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001_grp2 = ((m_axi_gmem0_0_WREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp0_stage0_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_grp2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((1'b0 == ap_ce) | ((m_axi_gmem0_0_WREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone_grp0 = (1'b0 == ap_ce);
end

assign ap_block_pp0_stage1_01001_grp3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001_grp0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001_grp3 = ((m_axi_gmem0_0_WREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp0_stage1_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_grp3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((1'b0 == ap_ce) | ((m_axi_gmem0_0_WREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone_grp0 = (1'b0 == ap_ce);
end

assign ap_block_pp0_stage2_01001_grp4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001_grp0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage2_11001_grp4 = ((m_axi_gmem0_0_WREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp0_stage2_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_grp4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage2_subdone = ((1'b0 == ap_ce) | ((m_axi_gmem0_0_WREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage2_subdone_grp0 = (1'b0 == ap_ce);
end

assign ap_block_pp0_stage3_01001_grp5 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001_grp0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage3_11001_grp5 = ((m_axi_gmem0_0_WREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp0_stage3_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_grp5 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage3_subdone = ((1'b0 == ap_ce) | ((m_axi_gmem0_0_WREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage3_subdone_grp0 = (1'b0 == ap_ce);
end

always @ (*) begin
    ap_block_pp0_stage4_01001_grp1 = ((m_axi_gmem0_0_BVALID == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

assign ap_block_pp0_stage4_11001_grp0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage4_11001_grp1 = (((m_axi_gmem0_0_WREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_enable_reg_pp0_iter0_reg == 1'b1) & (m_axi_gmem0_0_AWREADY == 1'b0)) | ((m_axi_gmem0_0_BVALID == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)));
end

assign ap_block_pp0_stage4_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_grp1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage4_subdone = ((1'b0 == ap_ce) | ((m_axi_gmem0_0_WREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_enable_reg_pp0_iter0_reg == 1'b1) & (m_axi_gmem0_0_AWREADY == 1'b0)) | ((m_axi_gmem0_0_BVALID == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage4_subdone_grp0 = (1'b0 == ap_ce);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign empty_30_fu_622_p3 = ((icmp_ln21_1_reg_912[0:0] == 1'b1) ? 32'd0 : LD_1_fu_618_p1);

assign empty_31_fu_723_p3 = ((icmp_ln21_2_reg_953[0:0] == 1'b1) ? 32'd0 : LD_2_fu_719_p1);

assign empty_32_fu_807_p3 = ((icmp_ln21_3_reg_1004[0:0] == 1'b1) ? 32'd0 : LD_3_fu_803_p1);

assign empty_33_fu_879_p3 = ((icmp_ln21_4_reg_1065[0:0] == 1'b1) ? 32'd0 : LD_4_fu_875_p1);

assign empty_fu_483_p3 = ((icmp_ln21_reg_886[0:0] == 1'b1) ? 32'd0 : LD_fu_479_p1);

assign grp_fu_265_p0 = select_ln21_reg_896;

assign grp_fu_265_p1 = add_ln21_reg_907;

assign grp_fu_372_p0 = select_ln21_2_reg_922;

assign grp_fu_372_p1 = add_ln21_3_reg_948;

assign grp_fu_511_p0 = select_ln21_4_reg_963;

assign grp_fu_511_p1 = add_ln21_5_reg_999;

assign grp_fu_650_p0 = select_ln21_6_reg_1014;

assign grp_fu_650_p1 = add_ln21_7_reg_1060;

assign grp_fu_751_p0 = select_ln21_8_reg_1075;

assign grp_fu_751_p1 = add_ln21_9_reg_1126;

assign icmp_ln21_1_fu_231_p2 = ((ap_port_reg_p_read1 == 18'd0) ? 1'b1 : 1'b0);

assign icmp_ln21_2_fu_318_p2 = ((ap_port_reg_p_read2 == 18'd0) ? 1'b1 : 1'b0);

assign icmp_ln21_3_fu_395_p2 = ((ap_port_reg_p_read3 == 18'd0) ? 1'b1 : 1'b0);

assign icmp_ln21_4_fu_534_p2 = ((ap_port_reg_p_read4 == 18'd0) ? 1'b1 : 1'b0);

assign icmp_ln21_fu_186_p2 = ((p_read == 18'd0) ? 1'b1 : 1'b0);

assign m_axi_gmem0_0_ARADDR = 32'd0;

assign m_axi_gmem0_0_ARBURST = 2'd0;

assign m_axi_gmem0_0_ARCACHE = 4'd0;

assign m_axi_gmem0_0_ARID = 1'd0;

assign m_axi_gmem0_0_ARLEN = 32'd0;

assign m_axi_gmem0_0_ARLOCK = 2'd0;

assign m_axi_gmem0_0_ARPROT = 3'd0;

assign m_axi_gmem0_0_ARQOS = 4'd0;

assign m_axi_gmem0_0_ARREGION = 4'd0;

assign m_axi_gmem0_0_ARSIZE = 3'd0;

assign m_axi_gmem0_0_ARUSER = 1'd0;

assign m_axi_gmem0_0_ARVALID = 1'b0;

assign m_axi_gmem0_0_AWADDR = sext_ln21_fu_562_p1;

assign m_axi_gmem0_0_AWBURST = 2'd0;

assign m_axi_gmem0_0_AWCACHE = 4'd0;

assign m_axi_gmem0_0_AWID = 1'd0;

assign m_axi_gmem0_0_AWLEN = 32'd5;

assign m_axi_gmem0_0_AWLOCK = 2'd0;

assign m_axi_gmem0_0_AWPROT = 3'd0;

assign m_axi_gmem0_0_AWQOS = 4'd0;

assign m_axi_gmem0_0_AWREGION = 4'd0;

assign m_axi_gmem0_0_AWSIZE = 3'd0;

assign m_axi_gmem0_0_AWUSER = 1'd0;

assign m_axi_gmem0_0_RREADY = 1'b0;

assign m_axi_gmem0_0_WID = 1'd0;

assign m_axi_gmem0_0_WLAST = 1'b0;

assign m_axi_gmem0_0_WSTRB = 4'd15;

assign m_axi_gmem0_0_WUSER = 1'd0;

assign p_shl1_fu_287_p3 = {{trunc_ln21_2_fu_283_p1}, {2'd0}};

assign p_shl_fu_275_p3 = {{trunc_ln21_1_fu_271_p1}, {4'd0}};

assign pi_assign_1_fu_606_p5 = {{zext_ln21_5_fu_572_p1[63:32]}, {tmp_3_fu_599_p3}, {zext_ln21_5_fu_572_p1[22:0]}};

assign pi_assign_2_fu_707_p5 = {{zext_ln21_8_fu_673_p1[63:32]}, {tmp_s_fu_700_p3}, {zext_ln21_8_fu_673_p1[22:0]}};

assign pi_assign_3_fu_791_p5 = {{zext_ln21_11_fu_757_p1[63:32]}, {tmp_12_fu_784_p3}, {zext_ln21_11_fu_757_p1[22:0]}};

assign pi_assign_4_fu_863_p5 = {{zext_ln21_14_fu_829_p1[63:32]}, {tmp_16_fu_856_p3}, {zext_ln21_14_fu_829_p1[22:0]}};

assign pi_assign_fu_467_p5 = {{zext_ln21_2_fu_433_p1[63:32]}, {tmp_2_fu_460_p3}, {zext_ln21_2_fu_433_p1[22:0]}};

assign select_ln21_1_fu_443_p3 = ((tmp_4_fu_436_p3[0:0] == 1'b1) ? 8'd127 : 8'd126);

assign select_ln21_2_fu_251_p3 = ((tmp_6_fu_237_p3[0:0] == 1'b1) ? sub_ln21_2_fu_245_p2 : ap_port_reg_p_read1);

assign select_ln21_3_fu_582_p3 = ((tmp_7_fu_575_p3[0:0] == 1'b1) ? 8'd127 : 8'd126);

assign select_ln21_4_fu_338_p3 = ((tmp_9_fu_324_p3[0:0] == 1'b1) ? sub_ln21_4_fu_332_p2 : ap_port_reg_p_read2);

assign select_ln21_5_fu_683_p3 = ((tmp_11_fu_676_p3[0:0] == 1'b1) ? 8'd127 : 8'd126);

assign select_ln21_6_fu_415_p3 = ((tmp_13_fu_401_p3[0:0] == 1'b1) ? sub_ln21_6_fu_409_p2 : ap_port_reg_p_read3);

assign select_ln21_7_fu_767_p3 = ((tmp_15_fu_760_p3[0:0] == 1'b1) ? 8'd127 : 8'd126);

assign select_ln21_8_fu_554_p3 = ((tmp_17_fu_540_p3[0:0] == 1'b1) ? sub_ln21_8_fu_548_p2 : ap_port_reg_p_read4);

assign select_ln21_9_fu_839_p3 = ((tmp_19_fu_832_p3[0:0] == 1'b1) ? 8'd127 : 8'd126);

assign select_ln21_fu_206_p3 = ((tmp_fu_192_p3[0:0] == 1'b1) ? sub_ln21_fu_200_p2 : p_read);

assign sext_ln21_1_fu_451_p1 = $signed(sub_ln21_1_reg_979);

assign sext_ln21_2_fu_590_p1 = $signed(sub_ln21_3_reg_1040);

assign sext_ln21_3_fu_691_p1 = $signed(sub_ln21_5_reg_1106);

assign sext_ln21_4_fu_775_p1 = $signed(sub_ln21_7_reg_1146);

assign sext_ln21_5_fu_847_p1 = $signed(sub_ln21_9_reg_1176);

assign sext_ln21_fu_562_p1 = $signed(trunc_ln21_5_reg_1020);

assign sub_ln21_1_fu_356_p2 = (5'd8 - trunc_ln21_reg_902);

assign sub_ln21_2_fu_245_p2 = (18'd0 - ap_port_reg_p_read1);

assign sub_ln21_3_fu_500_p2 = (5'd8 - trunc_ln21_3_reg_943);

assign sub_ln21_4_fu_332_p2 = (18'd0 - ap_port_reg_p_read2);

assign sub_ln21_5_fu_639_p2 = (5'd8 - trunc_ln21_4_reg_994);

assign sub_ln21_6_fu_409_p2 = (18'd0 - ap_port_reg_p_read3);

assign sub_ln21_7_fu_740_p2 = (5'd8 - trunc_ln21_6_reg_1055);

assign sub_ln21_8_fu_548_p2 = (18'd0 - ap_port_reg_p_read4);

assign sub_ln21_9_fu_824_p2 = (5'd8 - trunc_ln21_7_reg_1121);

assign sub_ln21_fu_200_p2 = (18'd0 - p_read);

assign tmp_11_fu_676_p3 = shl_ln21_2_reg_1096[32'd25];

assign tmp_12_fu_784_p3 = {{tmp_13_reg_1009}, {add_ln21_8_fu_778_p2}};

assign tmp_13_fu_401_p3 = ap_port_reg_p_read3[32'd17];

assign tmp_15_fu_760_p3 = shl_ln21_3_reg_1136[32'd25];

assign tmp_16_fu_856_p3 = {{tmp_17_reg_1070}, {add_ln21_10_fu_850_p2}};

assign tmp_17_fu_540_p3 = ap_port_reg_p_read4[32'd17];

assign tmp_19_fu_832_p3 = shl_ln21_4_reg_1166[32'd25];

assign tmp_2_fu_460_p3 = {{tmp_reg_891}, {add_ln21_1_fu_454_p2}};

assign tmp_3_fu_599_p3 = {{tmp_6_reg_917}, {add_ln21_4_fu_593_p2}};

assign tmp_4_fu_436_p3 = shl_ln21_reg_969[32'd25];

assign tmp_6_fu_237_p3 = ap_port_reg_p_read1[32'd17];

assign tmp_7_fu_575_p3 = shl_ln21_1_reg_1030[32'd25];

assign tmp_9_fu_324_p3 = ap_port_reg_p_read2[32'd17];

assign tmp_fu_192_p3 = p_read[32'd17];

assign tmp_s_fu_700_p3 = {{tmp_9_reg_958}, {add_ln21_6_fu_694_p2}};

assign trunc_ln21_1_fu_271_p1 = ap_port_reg_n[27:0];

assign trunc_ln21_2_fu_283_p1 = ap_port_reg_n[29:0];

assign trunc_ln21_3_fu_308_p1 = tmp_8_fu_301_p3[4:0];

assign trunc_ln21_4_fu_385_p1 = tmp_5_fu_378_p3[4:0];

assign trunc_ln21_6_fu_524_p1 = tmp_10_fu_517_p3[4:0];

assign trunc_ln21_7_fu_663_p1 = tmp_14_fu_656_p3[4:0];

assign trunc_ln21_fu_221_p1 = tmp_1_fu_214_p3[4:0];

assign zext_ln21_11_fu_757_p1 = lshr_ln21_3_reg_1141;

assign zext_ln21_14_fu_829_p1 = lshr_ln21_4_reg_1171;

assign zext_ln21_2_fu_433_p1 = lshr_ln_reg_974;

assign zext_ln21_5_fu_572_p1 = lshr_ln21_1_reg_1035;

assign zext_ln21_8_fu_673_p1 = lshr_ln21_2_reg_1101;

always @ (posedge ap_clk) begin
    add_ln21_11_reg_938[1:0] <= 2'b00;
end

endmodule //conifer_jettag_accelerator_copy_output
