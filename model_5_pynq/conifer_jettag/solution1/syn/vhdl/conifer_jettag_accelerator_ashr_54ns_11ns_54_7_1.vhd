-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;


entity conifer_jettag_accelerator_ashr_54ns_11ns_54_7_1 is
generic (
    ID         : INTEGER := 1;
    NUM_STAGE  : INTEGER := 0;
    din0_WIDTH : INTEGER := 1;
    din1_WIDTH : INTEGER := 1;
    dout_WIDTH : INTEGER := 1;
    OP         : INTEGER := 1);
port (

    clk: in std_logic;
    ce: in std_logic;
    reset: in std_logic;

    din0: in std_logic_vector(din0_WIDTH - 1 downto 0);
    din1: in std_logic_vector(din0_WIDTH - 1 downto 0);
    dout: out std_logic_vector(dout_WIDTH - 1 downto 0));

end entity;

architecture behav of conifer_jettag_accelerator_ashr_54ns_11ns_54_7_1 is
    signal tmp_product : std_logic_vector(dout_WIDTH - 1 downto 0);
    signal a_i : std_logic_vector(din0_WIDTH - 1 downto 0);
    signal b_i : std_logic_vector(din0_WIDTH - 1 downto 0);
    
    signal buff0 : std_logic_vector(dout_WIDTH - 1 downto 0);
    
    
    signal a_reg : std_logic_vector(din0_WIDTH - 1 downto 0);
    signal b_reg : std_logic_vector(din0_WIDTH - 1 downto 0);
    
    
    signal buff1 : std_logic_vector(dout_WIDTH - 1 downto 0);
    
    
    signal buff2 : std_logic_vector(dout_WIDTH - 1 downto 0);
    
    
    signal buff3 : std_logic_vector(dout_WIDTH - 1 downto 0);
    
    
    signal buff4 : std_logic_vector(dout_WIDTH - 1 downto 0);
    
begin
    a_i <= din0;
    b_i <= din1;







    tmp_product <= std_logic_vector(shift_right(signed(a_reg),to_integer(unsigned(b_reg))));










    dout <= buff4;



    process(clk)
    begin
        if (clk'event and clk = '1') then
            if (reset = '1') then






                buff4 <= (others => '0');

            else 
                if (ce = '1') then
                    buff0 <= tmp_product;

                    a_reg <= a_i;
                    b_reg <= b_i;


                    buff1 <= buff0;


                    buff2 <= buff1;


                    buff3 <= buff2;


                    buff4 <= buff3;

                end if;
            end if;
        end if;
    end process;

end architecture;
